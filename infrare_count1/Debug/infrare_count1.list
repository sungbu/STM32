
infrare_count1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002630  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08002814  08002814  00012814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002888  08002888  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08002888  08002888  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002888  08002888  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002888  08002888  00012888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800288c  0800288c  0001288c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08002890  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  2000005c  080028ec  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000258  080028ec  00020258  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b1bd  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bc9  00000000  00000000  0002b285  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ba8  00000000  00000000  0002ce50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000913  00000000  00000000  0002d9f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019d27  00000000  00000000  0002e30b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dbcc  00000000  00000000  00048032  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000984f2  00000000  00000000  00055bfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003500  00000000  00000000  000ee0f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000f15f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000005c 	.word	0x2000005c
 8000200:	00000000 	.word	0x00000000
 8000204:	080027fc 	.word	0x080027fc

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000060 	.word	0x20000060
 8000220:	080027fc 	.word	0x080027fc

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000234:	b480      	push	{r7}
 8000236:	b083      	sub	sp, #12
 8000238:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800023a:	4b08      	ldr	r3, [pc, #32]	; (800025c <MX_GPIO_Init+0x28>)
 800023c:	699b      	ldr	r3, [r3, #24]
 800023e:	4a07      	ldr	r2, [pc, #28]	; (800025c <MX_GPIO_Init+0x28>)
 8000240:	f043 0304 	orr.w	r3, r3, #4
 8000244:	6193      	str	r3, [r2, #24]
 8000246:	4b05      	ldr	r3, [pc, #20]	; (800025c <MX_GPIO_Init+0x28>)
 8000248:	699b      	ldr	r3, [r3, #24]
 800024a:	f003 0304 	and.w	r3, r3, #4
 800024e:	607b      	str	r3, [r7, #4]
 8000250:	687b      	ldr	r3, [r7, #4]

}
 8000252:	bf00      	nop
 8000254:	370c      	adds	r7, #12
 8000256:	46bd      	mov	sp, r7
 8000258:	bc80      	pop	{r7}
 800025a:	4770      	bx	lr
 800025c:	40021000 	.word	0x40021000

08000260 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b088      	sub	sp, #32
 8000264:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000266:	f000 fa4d 	bl	8000704 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800026a:	f000 f84b 	bl	8000304 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800026e:	f7ff ffe1 	bl	8000234 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000272:	f000 f91d 	bl	80004b0 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000276:	f000 f9a9 	bl	80005cc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);//开启定时器
 800027a:	481e      	ldr	r0, [pc, #120]	; (80002f4 <main+0x94>)
 800027c:	f001 f9a0 	bl	80015c0 <HAL_TIM_Base_Start>
  int counter = 0;
 8000280:	2300      	movs	r3, #0
 8000282:	61fb      	str	r3, [r7, #28]
  char message[20] = "";
 8000284:	2300      	movs	r3, #0
 8000286:	60bb      	str	r3, [r7, #8]
 8000288:	f107 030c 	add.w	r3, r7, #12
 800028c:	2200      	movs	r2, #0
 800028e:	601a      	str	r2, [r3, #0]
 8000290:	605a      	str	r2, [r3, #4]
 8000292:	609a      	str	r2, [r3, #8]
 8000294:	60da      	str	r2, [r3, #12]
  char testStr[] = "begin";
 8000296:	4a18      	ldr	r2, [pc, #96]	; (80002f8 <main+0x98>)
 8000298:	463b      	mov	r3, r7
 800029a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800029e:	6018      	str	r0, [r3, #0]
 80002a0:	3304      	adds	r3, #4
 80002a2:	8019      	strh	r1, [r3, #0]

  HAL_UART_Transmit(&huart1, (uint8_t*)testStr, strlen(testStr), 100);
 80002a4:	463b      	mov	r3, r7
 80002a6:	4618      	mov	r0, r3
 80002a8:	f7ff ffbc 	bl	8000224 <strlen>
 80002ac:	4603      	mov	r3, r0
 80002ae:	b29a      	uxth	r2, r3
 80002b0:	4639      	mov	r1, r7
 80002b2:	2364      	movs	r3, #100	; 0x64
 80002b4:	4811      	ldr	r0, [pc, #68]	; (80002fc <main+0x9c>)
 80002b6:	f001 fc6f 	bl	8001b98 <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  counter = __HAL_TIM_GET_COUNTER(&htim2); //获取定时器计数值
 80002ba:	4b0e      	ldr	r3, [pc, #56]	; (80002f4 <main+0x94>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002c0:	61fb      	str	r3, [r7, #28]
	  sprintf(message,"counter: %d",counter);
 80002c2:	f107 0308 	add.w	r3, r7, #8
 80002c6:	69fa      	ldr	r2, [r7, #28]
 80002c8:	490d      	ldr	r1, [pc, #52]	; (8000300 <main+0xa0>)
 80002ca:	4618      	mov	r0, r3
 80002cc:	f001 fde4 	bl	8001e98 <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), 100);
 80002d0:	f107 0308 	add.w	r3, r7, #8
 80002d4:	4618      	mov	r0, r3
 80002d6:	f7ff ffa5 	bl	8000224 <strlen>
 80002da:	4603      	mov	r3, r0
 80002dc:	b29a      	uxth	r2, r3
 80002de:	f107 0108 	add.w	r1, r7, #8
 80002e2:	2364      	movs	r3, #100	; 0x64
 80002e4:	4805      	ldr	r0, [pc, #20]	; (80002fc <main+0x9c>)
 80002e6:	f001 fc57 	bl	8001b98 <HAL_UART_Transmit>
	  HAL_Delay(100);
 80002ea:	2064      	movs	r0, #100	; 0x64
 80002ec:	f000 fa6c 	bl	80007c8 <HAL_Delay>
	  counter = __HAL_TIM_GET_COUNTER(&htim2); //获取定时器计数值
 80002f0:	e7e3      	b.n	80002ba <main+0x5a>
 80002f2:	bf00      	nop
 80002f4:	2000007c 	.word	0x2000007c
 80002f8:	08002820 	.word	0x08002820
 80002fc:	200000c4 	.word	0x200000c4
 8000300:	08002814 	.word	0x08002814

08000304 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b090      	sub	sp, #64	; 0x40
 8000308:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800030a:	f107 0318 	add.w	r3, r7, #24
 800030e:	2228      	movs	r2, #40	; 0x28
 8000310:	2100      	movs	r1, #0
 8000312:	4618      	mov	r0, r3
 8000314:	f001 fde0 	bl	8001ed8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000318:	1d3b      	adds	r3, r7, #4
 800031a:	2200      	movs	r2, #0
 800031c:	601a      	str	r2, [r3, #0]
 800031e:	605a      	str	r2, [r3, #4]
 8000320:	609a      	str	r2, [r3, #8]
 8000322:	60da      	str	r2, [r3, #12]
 8000324:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000326:	2302      	movs	r3, #2
 8000328:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800032a:	2301      	movs	r3, #1
 800032c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800032e:	2310      	movs	r3, #16
 8000330:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000332:	2300      	movs	r3, #0
 8000334:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000336:	f107 0318 	add.w	r3, r7, #24
 800033a:	4618      	mov	r0, r3
 800033c:	f000 fce0 	bl	8000d00 <HAL_RCC_OscConfig>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000346:	f000 f818 	bl	800037a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800034a:	230f      	movs	r3, #15
 800034c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800034e:	2300      	movs	r3, #0
 8000350:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000352:	2300      	movs	r3, #0
 8000354:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000356:	2300      	movs	r3, #0
 8000358:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800035a:	2300      	movs	r3, #0
 800035c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800035e:	1d3b      	adds	r3, r7, #4
 8000360:	2100      	movs	r1, #0
 8000362:	4618      	mov	r0, r3
 8000364:	f000 ff4e 	bl	8001204 <HAL_RCC_ClockConfig>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d001      	beq.n	8000372 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800036e:	f000 f804 	bl	800037a <Error_Handler>
  }
}
 8000372:	bf00      	nop
 8000374:	3740      	adds	r7, #64	; 0x40
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}

0800037a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800037a:	b480      	push	{r7}
 800037c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800037e:	b672      	cpsid	i
}
 8000380:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000382:	e7fe      	b.n	8000382 <Error_Handler+0x8>

08000384 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000384:	b480      	push	{r7}
 8000386:	b085      	sub	sp, #20
 8000388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800038a:	4b15      	ldr	r3, [pc, #84]	; (80003e0 <HAL_MspInit+0x5c>)
 800038c:	699b      	ldr	r3, [r3, #24]
 800038e:	4a14      	ldr	r2, [pc, #80]	; (80003e0 <HAL_MspInit+0x5c>)
 8000390:	f043 0301 	orr.w	r3, r3, #1
 8000394:	6193      	str	r3, [r2, #24]
 8000396:	4b12      	ldr	r3, [pc, #72]	; (80003e0 <HAL_MspInit+0x5c>)
 8000398:	699b      	ldr	r3, [r3, #24]
 800039a:	f003 0301 	and.w	r3, r3, #1
 800039e:	60bb      	str	r3, [r7, #8]
 80003a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003a2:	4b0f      	ldr	r3, [pc, #60]	; (80003e0 <HAL_MspInit+0x5c>)
 80003a4:	69db      	ldr	r3, [r3, #28]
 80003a6:	4a0e      	ldr	r2, [pc, #56]	; (80003e0 <HAL_MspInit+0x5c>)
 80003a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003ac:	61d3      	str	r3, [r2, #28]
 80003ae:	4b0c      	ldr	r3, [pc, #48]	; (80003e0 <HAL_MspInit+0x5c>)
 80003b0:	69db      	ldr	r3, [r3, #28]
 80003b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003b6:	607b      	str	r3, [r7, #4]
 80003b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80003ba:	4b0a      	ldr	r3, [pc, #40]	; (80003e4 <HAL_MspInit+0x60>)
 80003bc:	685b      	ldr	r3, [r3, #4]
 80003be:	60fb      	str	r3, [r7, #12]
 80003c0:	68fb      	ldr	r3, [r7, #12]
 80003c2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003c6:	60fb      	str	r3, [r7, #12]
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80003ce:	60fb      	str	r3, [r7, #12]
 80003d0:	4a04      	ldr	r2, [pc, #16]	; (80003e4 <HAL_MspInit+0x60>)
 80003d2:	68fb      	ldr	r3, [r7, #12]
 80003d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003d6:	bf00      	nop
 80003d8:	3714      	adds	r7, #20
 80003da:	46bd      	mov	sp, r7
 80003dc:	bc80      	pop	{r7}
 80003de:	4770      	bx	lr
 80003e0:	40021000 	.word	0x40021000
 80003e4:	40010000 	.word	0x40010000

080003e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003e8:	b480      	push	{r7}
 80003ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80003ec:	e7fe      	b.n	80003ec <NMI_Handler+0x4>

080003ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003ee:	b480      	push	{r7}
 80003f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003f2:	e7fe      	b.n	80003f2 <HardFault_Handler+0x4>

080003f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003f8:	e7fe      	b.n	80003f8 <MemManage_Handler+0x4>

080003fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003fa:	b480      	push	{r7}
 80003fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003fe:	e7fe      	b.n	80003fe <BusFault_Handler+0x4>

08000400 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000400:	b480      	push	{r7}
 8000402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000404:	e7fe      	b.n	8000404 <UsageFault_Handler+0x4>

08000406 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000406:	b480      	push	{r7}
 8000408:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800040a:	bf00      	nop
 800040c:	46bd      	mov	sp, r7
 800040e:	bc80      	pop	{r7}
 8000410:	4770      	bx	lr

08000412 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000412:	b480      	push	{r7}
 8000414:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000416:	bf00      	nop
 8000418:	46bd      	mov	sp, r7
 800041a:	bc80      	pop	{r7}
 800041c:	4770      	bx	lr

0800041e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800041e:	b480      	push	{r7}
 8000420:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000422:	bf00      	nop
 8000424:	46bd      	mov	sp, r7
 8000426:	bc80      	pop	{r7}
 8000428:	4770      	bx	lr

0800042a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800042a:	b580      	push	{r7, lr}
 800042c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800042e:	f000 f9af 	bl	8000790 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000432:	bf00      	nop
 8000434:	bd80      	pop	{r7, pc}
	...

08000438 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b086      	sub	sp, #24
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000440:	4a14      	ldr	r2, [pc, #80]	; (8000494 <_sbrk+0x5c>)
 8000442:	4b15      	ldr	r3, [pc, #84]	; (8000498 <_sbrk+0x60>)
 8000444:	1ad3      	subs	r3, r2, r3
 8000446:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000448:	697b      	ldr	r3, [r7, #20]
 800044a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800044c:	4b13      	ldr	r3, [pc, #76]	; (800049c <_sbrk+0x64>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	2b00      	cmp	r3, #0
 8000452:	d102      	bne.n	800045a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000454:	4b11      	ldr	r3, [pc, #68]	; (800049c <_sbrk+0x64>)
 8000456:	4a12      	ldr	r2, [pc, #72]	; (80004a0 <_sbrk+0x68>)
 8000458:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800045a:	4b10      	ldr	r3, [pc, #64]	; (800049c <_sbrk+0x64>)
 800045c:	681a      	ldr	r2, [r3, #0]
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	4413      	add	r3, r2
 8000462:	693a      	ldr	r2, [r7, #16]
 8000464:	429a      	cmp	r2, r3
 8000466:	d207      	bcs.n	8000478 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000468:	f001 fd3e 	bl	8001ee8 <__errno>
 800046c:	4603      	mov	r3, r0
 800046e:	220c      	movs	r2, #12
 8000470:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000472:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000476:	e009      	b.n	800048c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000478:	4b08      	ldr	r3, [pc, #32]	; (800049c <_sbrk+0x64>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800047e:	4b07      	ldr	r3, [pc, #28]	; (800049c <_sbrk+0x64>)
 8000480:	681a      	ldr	r2, [r3, #0]
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	4413      	add	r3, r2
 8000486:	4a05      	ldr	r2, [pc, #20]	; (800049c <_sbrk+0x64>)
 8000488:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800048a:	68fb      	ldr	r3, [r7, #12]
}
 800048c:	4618      	mov	r0, r3
 800048e:	3718      	adds	r7, #24
 8000490:	46bd      	mov	sp, r7
 8000492:	bd80      	pop	{r7, pc}
 8000494:	2000c000 	.word	0x2000c000
 8000498:	00000400 	.word	0x00000400
 800049c:	20000078 	.word	0x20000078
 80004a0:	20000258 	.word	0x20000258

080004a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004a8:	bf00      	nop
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bc80      	pop	{r7}
 80004ae:	4770      	bx	lr

080004b0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b086      	sub	sp, #24
 80004b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004b6:	f107 0308 	add.w	r3, r7, #8
 80004ba:	2200      	movs	r2, #0
 80004bc:	601a      	str	r2, [r3, #0]
 80004be:	605a      	str	r2, [r3, #4]
 80004c0:	609a      	str	r2, [r3, #8]
 80004c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004c4:	463b      	mov	r3, r7
 80004c6:	2200      	movs	r2, #0
 80004c8:	601a      	str	r2, [r3, #0]
 80004ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80004cc:	4b20      	ldr	r3, [pc, #128]	; (8000550 <MX_TIM2_Init+0xa0>)
 80004ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80004d4:	4b1e      	ldr	r3, [pc, #120]	; (8000550 <MX_TIM2_Init+0xa0>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004da:	4b1d      	ldr	r3, [pc, #116]	; (8000550 <MX_TIM2_Init+0xa0>)
 80004dc:	2200      	movs	r2, #0
 80004de:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80004e0:	4b1b      	ldr	r3, [pc, #108]	; (8000550 <MX_TIM2_Init+0xa0>)
 80004e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80004e6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004e8:	4b19      	ldr	r3, [pc, #100]	; (8000550 <MX_TIM2_Init+0xa0>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004ee:	4b18      	ldr	r3, [pc, #96]	; (8000550 <MX_TIM2_Init+0xa0>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80004f4:	4816      	ldr	r0, [pc, #88]	; (8000550 <MX_TIM2_Init+0xa0>)
 80004f6:	f001 f813 	bl	8001520 <HAL_TIM_Base_Init>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d001      	beq.n	8000504 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000500:	f7ff ff3b 	bl	800037a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8000504:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000508:	60bb      	str	r3, [r7, #8]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 800050a:	2300      	movs	r3, #0
 800050c:	60fb      	str	r3, [r7, #12]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 800050e:	2300      	movs	r3, #0
 8000510:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockFilter = 0;
 8000512:	2300      	movs	r3, #0
 8000514:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000516:	f107 0308 	add.w	r3, r7, #8
 800051a:	4619      	mov	r1, r3
 800051c:	480c      	ldr	r0, [pc, #48]	; (8000550 <MX_TIM2_Init+0xa0>)
 800051e:	f001 f8a7 	bl	8001670 <HAL_TIM_ConfigClockSource>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d001      	beq.n	800052c <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8000528:	f7ff ff27 	bl	800037a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800052c:	2300      	movs	r3, #0
 800052e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000530:	2300      	movs	r3, #0
 8000532:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000534:	463b      	mov	r3, r7
 8000536:	4619      	mov	r1, r3
 8000538:	4805      	ldr	r0, [pc, #20]	; (8000550 <MX_TIM2_Init+0xa0>)
 800053a:	f001 fa71 	bl	8001a20 <HAL_TIMEx_MasterConfigSynchronization>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000544:	f7ff ff19 	bl	800037a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000548:	bf00      	nop
 800054a:	3718      	adds	r7, #24
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	2000007c 	.word	0x2000007c

08000554 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b088      	sub	sp, #32
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800055c:	f107 0310 	add.w	r3, r7, #16
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
 8000564:	605a      	str	r2, [r3, #4]
 8000566:	609a      	str	r2, [r3, #8]
 8000568:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM2)
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000572:	d123      	bne.n	80005bc <HAL_TIM_Base_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000574:	4b13      	ldr	r3, [pc, #76]	; (80005c4 <HAL_TIM_Base_MspInit+0x70>)
 8000576:	69db      	ldr	r3, [r3, #28]
 8000578:	4a12      	ldr	r2, [pc, #72]	; (80005c4 <HAL_TIM_Base_MspInit+0x70>)
 800057a:	f043 0301 	orr.w	r3, r3, #1
 800057e:	61d3      	str	r3, [r2, #28]
 8000580:	4b10      	ldr	r3, [pc, #64]	; (80005c4 <HAL_TIM_Base_MspInit+0x70>)
 8000582:	69db      	ldr	r3, [r3, #28]
 8000584:	f003 0301 	and.w	r3, r3, #1
 8000588:	60fb      	str	r3, [r7, #12]
 800058a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800058c:	4b0d      	ldr	r3, [pc, #52]	; (80005c4 <HAL_TIM_Base_MspInit+0x70>)
 800058e:	699b      	ldr	r3, [r3, #24]
 8000590:	4a0c      	ldr	r2, [pc, #48]	; (80005c4 <HAL_TIM_Base_MspInit+0x70>)
 8000592:	f043 0304 	orr.w	r3, r3, #4
 8000596:	6193      	str	r3, [r2, #24]
 8000598:	4b0a      	ldr	r3, [pc, #40]	; (80005c4 <HAL_TIM_Base_MspInit+0x70>)
 800059a:	699b      	ldr	r3, [r3, #24]
 800059c:	f003 0304 	and.w	r3, r3, #4
 80005a0:	60bb      	str	r3, [r7, #8]
 80005a2:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80005a4:	2301      	movs	r3, #1
 80005a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005a8:	2300      	movs	r3, #0
 80005aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ac:	2300      	movs	r3, #0
 80005ae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b0:	f107 0310 	add.w	r3, r7, #16
 80005b4:	4619      	mov	r1, r3
 80005b6:	4804      	ldr	r0, [pc, #16]	; (80005c8 <HAL_TIM_Base_MspInit+0x74>)
 80005b8:	f000 fa0e 	bl	80009d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80005bc:	bf00      	nop
 80005be:	3720      	adds	r7, #32
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	40021000 	.word	0x40021000
 80005c8:	40010800 	.word	0x40010800

080005cc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005d0:	4b11      	ldr	r3, [pc, #68]	; (8000618 <MX_USART1_UART_Init+0x4c>)
 80005d2:	4a12      	ldr	r2, [pc, #72]	; (800061c <MX_USART1_UART_Init+0x50>)
 80005d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80005d6:	4b10      	ldr	r3, [pc, #64]	; (8000618 <MX_USART1_UART_Init+0x4c>)
 80005d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005de:	4b0e      	ldr	r3, [pc, #56]	; (8000618 <MX_USART1_UART_Init+0x4c>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005e4:	4b0c      	ldr	r3, [pc, #48]	; (8000618 <MX_USART1_UART_Init+0x4c>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005ea:	4b0b      	ldr	r3, [pc, #44]	; (8000618 <MX_USART1_UART_Init+0x4c>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005f0:	4b09      	ldr	r3, [pc, #36]	; (8000618 <MX_USART1_UART_Init+0x4c>)
 80005f2:	220c      	movs	r2, #12
 80005f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005f6:	4b08      	ldr	r3, [pc, #32]	; (8000618 <MX_USART1_UART_Init+0x4c>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005fc:	4b06      	ldr	r3, [pc, #24]	; (8000618 <MX_USART1_UART_Init+0x4c>)
 80005fe:	2200      	movs	r2, #0
 8000600:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000602:	4805      	ldr	r0, [pc, #20]	; (8000618 <MX_USART1_UART_Init+0x4c>)
 8000604:	f001 fa78 	bl	8001af8 <HAL_UART_Init>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800060e:	f7ff feb4 	bl	800037a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000612:	bf00      	nop
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	200000c4 	.word	0x200000c4
 800061c:	40013800 	.word	0x40013800

08000620 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b088      	sub	sp, #32
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000628:	f107 0310 	add.w	r3, r7, #16
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]
 8000634:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4a1c      	ldr	r2, [pc, #112]	; (80006ac <HAL_UART_MspInit+0x8c>)
 800063c:	4293      	cmp	r3, r2
 800063e:	d131      	bne.n	80006a4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000640:	4b1b      	ldr	r3, [pc, #108]	; (80006b0 <HAL_UART_MspInit+0x90>)
 8000642:	699b      	ldr	r3, [r3, #24]
 8000644:	4a1a      	ldr	r2, [pc, #104]	; (80006b0 <HAL_UART_MspInit+0x90>)
 8000646:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800064a:	6193      	str	r3, [r2, #24]
 800064c:	4b18      	ldr	r3, [pc, #96]	; (80006b0 <HAL_UART_MspInit+0x90>)
 800064e:	699b      	ldr	r3, [r3, #24]
 8000650:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000654:	60fb      	str	r3, [r7, #12]
 8000656:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000658:	4b15      	ldr	r3, [pc, #84]	; (80006b0 <HAL_UART_MspInit+0x90>)
 800065a:	699b      	ldr	r3, [r3, #24]
 800065c:	4a14      	ldr	r2, [pc, #80]	; (80006b0 <HAL_UART_MspInit+0x90>)
 800065e:	f043 0304 	orr.w	r3, r3, #4
 8000662:	6193      	str	r3, [r2, #24]
 8000664:	4b12      	ldr	r3, [pc, #72]	; (80006b0 <HAL_UART_MspInit+0x90>)
 8000666:	699b      	ldr	r3, [r3, #24]
 8000668:	f003 0304 	and.w	r3, r3, #4
 800066c:	60bb      	str	r3, [r7, #8]
 800066e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000670:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000674:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000676:	2302      	movs	r3, #2
 8000678:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800067a:	2303      	movs	r3, #3
 800067c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800067e:	f107 0310 	add.w	r3, r7, #16
 8000682:	4619      	mov	r1, r3
 8000684:	480b      	ldr	r0, [pc, #44]	; (80006b4 <HAL_UART_MspInit+0x94>)
 8000686:	f000 f9a7 	bl	80009d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800068a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800068e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000690:	2300      	movs	r3, #0
 8000692:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000694:	2300      	movs	r3, #0
 8000696:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000698:	f107 0310 	add.w	r3, r7, #16
 800069c:	4619      	mov	r1, r3
 800069e:	4805      	ldr	r0, [pc, #20]	; (80006b4 <HAL_UART_MspInit+0x94>)
 80006a0:	f000 f99a 	bl	80009d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80006a4:	bf00      	nop
 80006a6:	3720      	adds	r7, #32
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	40013800 	.word	0x40013800
 80006b0:	40021000 	.word	0x40021000
 80006b4:	40010800 	.word	0x40010800

080006b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006b8:	f7ff fef4 	bl	80004a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006bc:	480b      	ldr	r0, [pc, #44]	; (80006ec <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80006be:	490c      	ldr	r1, [pc, #48]	; (80006f0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80006c0:	4a0c      	ldr	r2, [pc, #48]	; (80006f4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80006c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006c4:	e002      	b.n	80006cc <LoopCopyDataInit>

080006c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006ca:	3304      	adds	r3, #4

080006cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006d0:	d3f9      	bcc.n	80006c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006d2:	4a09      	ldr	r2, [pc, #36]	; (80006f8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80006d4:	4c09      	ldr	r4, [pc, #36]	; (80006fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80006d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006d8:	e001      	b.n	80006de <LoopFillZerobss>

080006da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006dc:	3204      	adds	r2, #4

080006de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006e0:	d3fb      	bcc.n	80006da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006e2:	f001 fc07 	bl	8001ef4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006e6:	f7ff fdbb 	bl	8000260 <main>
  bx lr
 80006ea:	4770      	bx	lr
  ldr r0, =_sdata
 80006ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006f0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80006f4:	08002890 	.word	0x08002890
  ldr r2, =_sbss
 80006f8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80006fc:	20000258 	.word	0x20000258

08000700 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000700:	e7fe      	b.n	8000700 <ADC1_2_IRQHandler>
	...

08000704 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000708:	4b08      	ldr	r3, [pc, #32]	; (800072c <HAL_Init+0x28>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a07      	ldr	r2, [pc, #28]	; (800072c <HAL_Init+0x28>)
 800070e:	f043 0310 	orr.w	r3, r3, #16
 8000712:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000714:	2003      	movs	r0, #3
 8000716:	f000 f92b 	bl	8000970 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800071a:	200f      	movs	r0, #15
 800071c:	f000 f808 	bl	8000730 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000720:	f7ff fe30 	bl	8000384 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000724:	2300      	movs	r3, #0
}
 8000726:	4618      	mov	r0, r3
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	40022000 	.word	0x40022000

08000730 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000738:	4b12      	ldr	r3, [pc, #72]	; (8000784 <HAL_InitTick+0x54>)
 800073a:	681a      	ldr	r2, [r3, #0]
 800073c:	4b12      	ldr	r3, [pc, #72]	; (8000788 <HAL_InitTick+0x58>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	4619      	mov	r1, r3
 8000742:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000746:	fbb3 f3f1 	udiv	r3, r3, r1
 800074a:	fbb2 f3f3 	udiv	r3, r2, r3
 800074e:	4618      	mov	r0, r3
 8000750:	f000 f935 	bl	80009be <HAL_SYSTICK_Config>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800075a:	2301      	movs	r3, #1
 800075c:	e00e      	b.n	800077c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	2b0f      	cmp	r3, #15
 8000762:	d80a      	bhi.n	800077a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000764:	2200      	movs	r2, #0
 8000766:	6879      	ldr	r1, [r7, #4]
 8000768:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800076c:	f000 f90b 	bl	8000986 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000770:	4a06      	ldr	r2, [pc, #24]	; (800078c <HAL_InitTick+0x5c>)
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000776:	2300      	movs	r3, #0
 8000778:	e000      	b.n	800077c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800077a:	2301      	movs	r3, #1
}
 800077c:	4618      	mov	r0, r3
 800077e:	3708      	adds	r7, #8
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	20000000 	.word	0x20000000
 8000788:	20000008 	.word	0x20000008
 800078c:	20000004 	.word	0x20000004

08000790 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000794:	4b05      	ldr	r3, [pc, #20]	; (80007ac <HAL_IncTick+0x1c>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	461a      	mov	r2, r3
 800079a:	4b05      	ldr	r3, [pc, #20]	; (80007b0 <HAL_IncTick+0x20>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4413      	add	r3, r2
 80007a0:	4a03      	ldr	r2, [pc, #12]	; (80007b0 <HAL_IncTick+0x20>)
 80007a2:	6013      	str	r3, [r2, #0]
}
 80007a4:	bf00      	nop
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bc80      	pop	{r7}
 80007aa:	4770      	bx	lr
 80007ac:	20000008 	.word	0x20000008
 80007b0:	2000010c 	.word	0x2000010c

080007b4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  return uwTick;
 80007b8:	4b02      	ldr	r3, [pc, #8]	; (80007c4 <HAL_GetTick+0x10>)
 80007ba:	681b      	ldr	r3, [r3, #0]
}
 80007bc:	4618      	mov	r0, r3
 80007be:	46bd      	mov	sp, r7
 80007c0:	bc80      	pop	{r7}
 80007c2:	4770      	bx	lr
 80007c4:	2000010c 	.word	0x2000010c

080007c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007d0:	f7ff fff0 	bl	80007b4 <HAL_GetTick>
 80007d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80007e0:	d005      	beq.n	80007ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007e2:	4b0a      	ldr	r3, [pc, #40]	; (800080c <HAL_Delay+0x44>)
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	461a      	mov	r2, r3
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	4413      	add	r3, r2
 80007ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007ee:	bf00      	nop
 80007f0:	f7ff ffe0 	bl	80007b4 <HAL_GetTick>
 80007f4:	4602      	mov	r2, r0
 80007f6:	68bb      	ldr	r3, [r7, #8]
 80007f8:	1ad3      	subs	r3, r2, r3
 80007fa:	68fa      	ldr	r2, [r7, #12]
 80007fc:	429a      	cmp	r2, r3
 80007fe:	d8f7      	bhi.n	80007f0 <HAL_Delay+0x28>
  {
  }
}
 8000800:	bf00      	nop
 8000802:	bf00      	nop
 8000804:	3710      	adds	r7, #16
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	20000008 	.word	0x20000008

08000810 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000810:	b480      	push	{r7}
 8000812:	b085      	sub	sp, #20
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	f003 0307 	and.w	r3, r3, #7
 800081e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000820:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <__NVIC_SetPriorityGrouping+0x44>)
 8000822:	68db      	ldr	r3, [r3, #12]
 8000824:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000826:	68ba      	ldr	r2, [r7, #8]
 8000828:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800082c:	4013      	ands	r3, r2
 800082e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000838:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800083c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000840:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000842:	4a04      	ldr	r2, [pc, #16]	; (8000854 <__NVIC_SetPriorityGrouping+0x44>)
 8000844:	68bb      	ldr	r3, [r7, #8]
 8000846:	60d3      	str	r3, [r2, #12]
}
 8000848:	bf00      	nop
 800084a:	3714      	adds	r7, #20
 800084c:	46bd      	mov	sp, r7
 800084e:	bc80      	pop	{r7}
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	e000ed00 	.word	0xe000ed00

08000858 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800085c:	4b04      	ldr	r3, [pc, #16]	; (8000870 <__NVIC_GetPriorityGrouping+0x18>)
 800085e:	68db      	ldr	r3, [r3, #12]
 8000860:	0a1b      	lsrs	r3, r3, #8
 8000862:	f003 0307 	and.w	r3, r3, #7
}
 8000866:	4618      	mov	r0, r3
 8000868:	46bd      	mov	sp, r7
 800086a:	bc80      	pop	{r7}
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	e000ed00 	.word	0xe000ed00

08000874 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	6039      	str	r1, [r7, #0]
 800087e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000884:	2b00      	cmp	r3, #0
 8000886:	db0a      	blt.n	800089e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	b2da      	uxtb	r2, r3
 800088c:	490c      	ldr	r1, [pc, #48]	; (80008c0 <__NVIC_SetPriority+0x4c>)
 800088e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000892:	0112      	lsls	r2, r2, #4
 8000894:	b2d2      	uxtb	r2, r2
 8000896:	440b      	add	r3, r1
 8000898:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800089c:	e00a      	b.n	80008b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	b2da      	uxtb	r2, r3
 80008a2:	4908      	ldr	r1, [pc, #32]	; (80008c4 <__NVIC_SetPriority+0x50>)
 80008a4:	79fb      	ldrb	r3, [r7, #7]
 80008a6:	f003 030f 	and.w	r3, r3, #15
 80008aa:	3b04      	subs	r3, #4
 80008ac:	0112      	lsls	r2, r2, #4
 80008ae:	b2d2      	uxtb	r2, r2
 80008b0:	440b      	add	r3, r1
 80008b2:	761a      	strb	r2, [r3, #24]
}
 80008b4:	bf00      	nop
 80008b6:	370c      	adds	r7, #12
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bc80      	pop	{r7}
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	e000e100 	.word	0xe000e100
 80008c4:	e000ed00 	.word	0xe000ed00

080008c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b089      	sub	sp, #36	; 0x24
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	60f8      	str	r0, [r7, #12]
 80008d0:	60b9      	str	r1, [r7, #8]
 80008d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	f003 0307 	and.w	r3, r3, #7
 80008da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008dc:	69fb      	ldr	r3, [r7, #28]
 80008de:	f1c3 0307 	rsb	r3, r3, #7
 80008e2:	2b04      	cmp	r3, #4
 80008e4:	bf28      	it	cs
 80008e6:	2304      	movcs	r3, #4
 80008e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008ea:	69fb      	ldr	r3, [r7, #28]
 80008ec:	3304      	adds	r3, #4
 80008ee:	2b06      	cmp	r3, #6
 80008f0:	d902      	bls.n	80008f8 <NVIC_EncodePriority+0x30>
 80008f2:	69fb      	ldr	r3, [r7, #28]
 80008f4:	3b03      	subs	r3, #3
 80008f6:	e000      	b.n	80008fa <NVIC_EncodePriority+0x32>
 80008f8:	2300      	movs	r3, #0
 80008fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000900:	69bb      	ldr	r3, [r7, #24]
 8000902:	fa02 f303 	lsl.w	r3, r2, r3
 8000906:	43da      	mvns	r2, r3
 8000908:	68bb      	ldr	r3, [r7, #8]
 800090a:	401a      	ands	r2, r3
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000910:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	fa01 f303 	lsl.w	r3, r1, r3
 800091a:	43d9      	mvns	r1, r3
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000920:	4313      	orrs	r3, r2
         );
}
 8000922:	4618      	mov	r0, r3
 8000924:	3724      	adds	r7, #36	; 0x24
 8000926:	46bd      	mov	sp, r7
 8000928:	bc80      	pop	{r7}
 800092a:	4770      	bx	lr

0800092c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	3b01      	subs	r3, #1
 8000938:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800093c:	d301      	bcc.n	8000942 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800093e:	2301      	movs	r3, #1
 8000940:	e00f      	b.n	8000962 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000942:	4a0a      	ldr	r2, [pc, #40]	; (800096c <SysTick_Config+0x40>)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	3b01      	subs	r3, #1
 8000948:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800094a:	210f      	movs	r1, #15
 800094c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000950:	f7ff ff90 	bl	8000874 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000954:	4b05      	ldr	r3, [pc, #20]	; (800096c <SysTick_Config+0x40>)
 8000956:	2200      	movs	r2, #0
 8000958:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800095a:	4b04      	ldr	r3, [pc, #16]	; (800096c <SysTick_Config+0x40>)
 800095c:	2207      	movs	r2, #7
 800095e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000960:	2300      	movs	r3, #0
}
 8000962:	4618      	mov	r0, r3
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	e000e010 	.word	0xe000e010

08000970 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000978:	6878      	ldr	r0, [r7, #4]
 800097a:	f7ff ff49 	bl	8000810 <__NVIC_SetPriorityGrouping>
}
 800097e:	bf00      	nop
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}

08000986 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000986:	b580      	push	{r7, lr}
 8000988:	b086      	sub	sp, #24
 800098a:	af00      	add	r7, sp, #0
 800098c:	4603      	mov	r3, r0
 800098e:	60b9      	str	r1, [r7, #8]
 8000990:	607a      	str	r2, [r7, #4]
 8000992:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000994:	2300      	movs	r3, #0
 8000996:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000998:	f7ff ff5e 	bl	8000858 <__NVIC_GetPriorityGrouping>
 800099c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800099e:	687a      	ldr	r2, [r7, #4]
 80009a0:	68b9      	ldr	r1, [r7, #8]
 80009a2:	6978      	ldr	r0, [r7, #20]
 80009a4:	f7ff ff90 	bl	80008c8 <NVIC_EncodePriority>
 80009a8:	4602      	mov	r2, r0
 80009aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009ae:	4611      	mov	r1, r2
 80009b0:	4618      	mov	r0, r3
 80009b2:	f7ff ff5f 	bl	8000874 <__NVIC_SetPriority>
}
 80009b6:	bf00      	nop
 80009b8:	3718      	adds	r7, #24
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}

080009be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009be:	b580      	push	{r7, lr}
 80009c0:	b082      	sub	sp, #8
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009c6:	6878      	ldr	r0, [r7, #4]
 80009c8:	f7ff ffb0 	bl	800092c <SysTick_Config>
 80009cc:	4603      	mov	r3, r0
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
	...

080009d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009d8:	b480      	push	{r7}
 80009da:	b08b      	sub	sp, #44	; 0x2c
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
 80009e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009e2:	2300      	movs	r3, #0
 80009e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80009e6:	2300      	movs	r3, #0
 80009e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009ea:	e179      	b.n	8000ce0 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80009ec:	2201      	movs	r2, #1
 80009ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f0:	fa02 f303 	lsl.w	r3, r2, r3
 80009f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	69fa      	ldr	r2, [r7, #28]
 80009fc:	4013      	ands	r3, r2
 80009fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a00:	69ba      	ldr	r2, [r7, #24]
 8000a02:	69fb      	ldr	r3, [r7, #28]
 8000a04:	429a      	cmp	r2, r3
 8000a06:	f040 8168 	bne.w	8000cda <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	685b      	ldr	r3, [r3, #4]
 8000a0e:	4a96      	ldr	r2, [pc, #600]	; (8000c68 <HAL_GPIO_Init+0x290>)
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d05e      	beq.n	8000ad2 <HAL_GPIO_Init+0xfa>
 8000a14:	4a94      	ldr	r2, [pc, #592]	; (8000c68 <HAL_GPIO_Init+0x290>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d875      	bhi.n	8000b06 <HAL_GPIO_Init+0x12e>
 8000a1a:	4a94      	ldr	r2, [pc, #592]	; (8000c6c <HAL_GPIO_Init+0x294>)
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d058      	beq.n	8000ad2 <HAL_GPIO_Init+0xfa>
 8000a20:	4a92      	ldr	r2, [pc, #584]	; (8000c6c <HAL_GPIO_Init+0x294>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d86f      	bhi.n	8000b06 <HAL_GPIO_Init+0x12e>
 8000a26:	4a92      	ldr	r2, [pc, #584]	; (8000c70 <HAL_GPIO_Init+0x298>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d052      	beq.n	8000ad2 <HAL_GPIO_Init+0xfa>
 8000a2c:	4a90      	ldr	r2, [pc, #576]	; (8000c70 <HAL_GPIO_Init+0x298>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d869      	bhi.n	8000b06 <HAL_GPIO_Init+0x12e>
 8000a32:	4a90      	ldr	r2, [pc, #576]	; (8000c74 <HAL_GPIO_Init+0x29c>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d04c      	beq.n	8000ad2 <HAL_GPIO_Init+0xfa>
 8000a38:	4a8e      	ldr	r2, [pc, #568]	; (8000c74 <HAL_GPIO_Init+0x29c>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d863      	bhi.n	8000b06 <HAL_GPIO_Init+0x12e>
 8000a3e:	4a8e      	ldr	r2, [pc, #568]	; (8000c78 <HAL_GPIO_Init+0x2a0>)
 8000a40:	4293      	cmp	r3, r2
 8000a42:	d046      	beq.n	8000ad2 <HAL_GPIO_Init+0xfa>
 8000a44:	4a8c      	ldr	r2, [pc, #560]	; (8000c78 <HAL_GPIO_Init+0x2a0>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d85d      	bhi.n	8000b06 <HAL_GPIO_Init+0x12e>
 8000a4a:	2b12      	cmp	r3, #18
 8000a4c:	d82a      	bhi.n	8000aa4 <HAL_GPIO_Init+0xcc>
 8000a4e:	2b12      	cmp	r3, #18
 8000a50:	d859      	bhi.n	8000b06 <HAL_GPIO_Init+0x12e>
 8000a52:	a201      	add	r2, pc, #4	; (adr r2, 8000a58 <HAL_GPIO_Init+0x80>)
 8000a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a58:	08000ad3 	.word	0x08000ad3
 8000a5c:	08000aad 	.word	0x08000aad
 8000a60:	08000abf 	.word	0x08000abf
 8000a64:	08000b01 	.word	0x08000b01
 8000a68:	08000b07 	.word	0x08000b07
 8000a6c:	08000b07 	.word	0x08000b07
 8000a70:	08000b07 	.word	0x08000b07
 8000a74:	08000b07 	.word	0x08000b07
 8000a78:	08000b07 	.word	0x08000b07
 8000a7c:	08000b07 	.word	0x08000b07
 8000a80:	08000b07 	.word	0x08000b07
 8000a84:	08000b07 	.word	0x08000b07
 8000a88:	08000b07 	.word	0x08000b07
 8000a8c:	08000b07 	.word	0x08000b07
 8000a90:	08000b07 	.word	0x08000b07
 8000a94:	08000b07 	.word	0x08000b07
 8000a98:	08000b07 	.word	0x08000b07
 8000a9c:	08000ab5 	.word	0x08000ab5
 8000aa0:	08000ac9 	.word	0x08000ac9
 8000aa4:	4a75      	ldr	r2, [pc, #468]	; (8000c7c <HAL_GPIO_Init+0x2a4>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d013      	beq.n	8000ad2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000aaa:	e02c      	b.n	8000b06 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	68db      	ldr	r3, [r3, #12]
 8000ab0:	623b      	str	r3, [r7, #32]
          break;
 8000ab2:	e029      	b.n	8000b08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	68db      	ldr	r3, [r3, #12]
 8000ab8:	3304      	adds	r3, #4
 8000aba:	623b      	str	r3, [r7, #32]
          break;
 8000abc:	e024      	b.n	8000b08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	68db      	ldr	r3, [r3, #12]
 8000ac2:	3308      	adds	r3, #8
 8000ac4:	623b      	str	r3, [r7, #32]
          break;
 8000ac6:	e01f      	b.n	8000b08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	68db      	ldr	r3, [r3, #12]
 8000acc:	330c      	adds	r3, #12
 8000ace:	623b      	str	r3, [r7, #32]
          break;
 8000ad0:	e01a      	b.n	8000b08 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	689b      	ldr	r3, [r3, #8]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d102      	bne.n	8000ae0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ada:	2304      	movs	r3, #4
 8000adc:	623b      	str	r3, [r7, #32]
          break;
 8000ade:	e013      	b.n	8000b08 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	689b      	ldr	r3, [r3, #8]
 8000ae4:	2b01      	cmp	r3, #1
 8000ae6:	d105      	bne.n	8000af4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ae8:	2308      	movs	r3, #8
 8000aea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	69fa      	ldr	r2, [r7, #28]
 8000af0:	611a      	str	r2, [r3, #16]
          break;
 8000af2:	e009      	b.n	8000b08 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000af4:	2308      	movs	r3, #8
 8000af6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	69fa      	ldr	r2, [r7, #28]
 8000afc:	615a      	str	r2, [r3, #20]
          break;
 8000afe:	e003      	b.n	8000b08 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b00:	2300      	movs	r3, #0
 8000b02:	623b      	str	r3, [r7, #32]
          break;
 8000b04:	e000      	b.n	8000b08 <HAL_GPIO_Init+0x130>
          break;
 8000b06:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b08:	69bb      	ldr	r3, [r7, #24]
 8000b0a:	2bff      	cmp	r3, #255	; 0xff
 8000b0c:	d801      	bhi.n	8000b12 <HAL_GPIO_Init+0x13a>
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	e001      	b.n	8000b16 <HAL_GPIO_Init+0x13e>
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	3304      	adds	r3, #4
 8000b16:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b18:	69bb      	ldr	r3, [r7, #24]
 8000b1a:	2bff      	cmp	r3, #255	; 0xff
 8000b1c:	d802      	bhi.n	8000b24 <HAL_GPIO_Init+0x14c>
 8000b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b20:	009b      	lsls	r3, r3, #2
 8000b22:	e002      	b.n	8000b2a <HAL_GPIO_Init+0x152>
 8000b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b26:	3b08      	subs	r3, #8
 8000b28:	009b      	lsls	r3, r3, #2
 8000b2a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	681a      	ldr	r2, [r3, #0]
 8000b30:	210f      	movs	r1, #15
 8000b32:	693b      	ldr	r3, [r7, #16]
 8000b34:	fa01 f303 	lsl.w	r3, r1, r3
 8000b38:	43db      	mvns	r3, r3
 8000b3a:	401a      	ands	r2, r3
 8000b3c:	6a39      	ldr	r1, [r7, #32]
 8000b3e:	693b      	ldr	r3, [r7, #16]
 8000b40:	fa01 f303 	lsl.w	r3, r1, r3
 8000b44:	431a      	orrs	r2, r3
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	f000 80c1 	beq.w	8000cda <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b58:	4b49      	ldr	r3, [pc, #292]	; (8000c80 <HAL_GPIO_Init+0x2a8>)
 8000b5a:	699b      	ldr	r3, [r3, #24]
 8000b5c:	4a48      	ldr	r2, [pc, #288]	; (8000c80 <HAL_GPIO_Init+0x2a8>)
 8000b5e:	f043 0301 	orr.w	r3, r3, #1
 8000b62:	6193      	str	r3, [r2, #24]
 8000b64:	4b46      	ldr	r3, [pc, #280]	; (8000c80 <HAL_GPIO_Init+0x2a8>)
 8000b66:	699b      	ldr	r3, [r3, #24]
 8000b68:	f003 0301 	and.w	r3, r3, #1
 8000b6c:	60bb      	str	r3, [r7, #8]
 8000b6e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b70:	4a44      	ldr	r2, [pc, #272]	; (8000c84 <HAL_GPIO_Init+0x2ac>)
 8000b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b74:	089b      	lsrs	r3, r3, #2
 8000b76:	3302      	adds	r3, #2
 8000b78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b7c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b80:	f003 0303 	and.w	r3, r3, #3
 8000b84:	009b      	lsls	r3, r3, #2
 8000b86:	220f      	movs	r2, #15
 8000b88:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8c:	43db      	mvns	r3, r3
 8000b8e:	68fa      	ldr	r2, [r7, #12]
 8000b90:	4013      	ands	r3, r2
 8000b92:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	4a3c      	ldr	r2, [pc, #240]	; (8000c88 <HAL_GPIO_Init+0x2b0>)
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d01f      	beq.n	8000bdc <HAL_GPIO_Init+0x204>
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	4a3b      	ldr	r2, [pc, #236]	; (8000c8c <HAL_GPIO_Init+0x2b4>)
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d019      	beq.n	8000bd8 <HAL_GPIO_Init+0x200>
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	4a3a      	ldr	r2, [pc, #232]	; (8000c90 <HAL_GPIO_Init+0x2b8>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d013      	beq.n	8000bd4 <HAL_GPIO_Init+0x1fc>
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	4a39      	ldr	r2, [pc, #228]	; (8000c94 <HAL_GPIO_Init+0x2bc>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d00d      	beq.n	8000bd0 <HAL_GPIO_Init+0x1f8>
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	4a38      	ldr	r2, [pc, #224]	; (8000c98 <HAL_GPIO_Init+0x2c0>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d007      	beq.n	8000bcc <HAL_GPIO_Init+0x1f4>
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	4a37      	ldr	r2, [pc, #220]	; (8000c9c <HAL_GPIO_Init+0x2c4>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d101      	bne.n	8000bc8 <HAL_GPIO_Init+0x1f0>
 8000bc4:	2305      	movs	r3, #5
 8000bc6:	e00a      	b.n	8000bde <HAL_GPIO_Init+0x206>
 8000bc8:	2306      	movs	r3, #6
 8000bca:	e008      	b.n	8000bde <HAL_GPIO_Init+0x206>
 8000bcc:	2304      	movs	r3, #4
 8000bce:	e006      	b.n	8000bde <HAL_GPIO_Init+0x206>
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	e004      	b.n	8000bde <HAL_GPIO_Init+0x206>
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	e002      	b.n	8000bde <HAL_GPIO_Init+0x206>
 8000bd8:	2301      	movs	r3, #1
 8000bda:	e000      	b.n	8000bde <HAL_GPIO_Init+0x206>
 8000bdc:	2300      	movs	r3, #0
 8000bde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000be0:	f002 0203 	and.w	r2, r2, #3
 8000be4:	0092      	lsls	r2, r2, #2
 8000be6:	4093      	lsls	r3, r2
 8000be8:	68fa      	ldr	r2, [r7, #12]
 8000bea:	4313      	orrs	r3, r2
 8000bec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000bee:	4925      	ldr	r1, [pc, #148]	; (8000c84 <HAL_GPIO_Init+0x2ac>)
 8000bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf2:	089b      	lsrs	r3, r3, #2
 8000bf4:	3302      	adds	r3, #2
 8000bf6:	68fa      	ldr	r2, [r7, #12]
 8000bf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d006      	beq.n	8000c16 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c08:	4b25      	ldr	r3, [pc, #148]	; (8000ca0 <HAL_GPIO_Init+0x2c8>)
 8000c0a:	689a      	ldr	r2, [r3, #8]
 8000c0c:	4924      	ldr	r1, [pc, #144]	; (8000ca0 <HAL_GPIO_Init+0x2c8>)
 8000c0e:	69bb      	ldr	r3, [r7, #24]
 8000c10:	4313      	orrs	r3, r2
 8000c12:	608b      	str	r3, [r1, #8]
 8000c14:	e006      	b.n	8000c24 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c16:	4b22      	ldr	r3, [pc, #136]	; (8000ca0 <HAL_GPIO_Init+0x2c8>)
 8000c18:	689a      	ldr	r2, [r3, #8]
 8000c1a:	69bb      	ldr	r3, [r7, #24]
 8000c1c:	43db      	mvns	r3, r3
 8000c1e:	4920      	ldr	r1, [pc, #128]	; (8000ca0 <HAL_GPIO_Init+0x2c8>)
 8000c20:	4013      	ands	r3, r2
 8000c22:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d006      	beq.n	8000c3e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c30:	4b1b      	ldr	r3, [pc, #108]	; (8000ca0 <HAL_GPIO_Init+0x2c8>)
 8000c32:	68da      	ldr	r2, [r3, #12]
 8000c34:	491a      	ldr	r1, [pc, #104]	; (8000ca0 <HAL_GPIO_Init+0x2c8>)
 8000c36:	69bb      	ldr	r3, [r7, #24]
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	60cb      	str	r3, [r1, #12]
 8000c3c:	e006      	b.n	8000c4c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c3e:	4b18      	ldr	r3, [pc, #96]	; (8000ca0 <HAL_GPIO_Init+0x2c8>)
 8000c40:	68da      	ldr	r2, [r3, #12]
 8000c42:	69bb      	ldr	r3, [r7, #24]
 8000c44:	43db      	mvns	r3, r3
 8000c46:	4916      	ldr	r1, [pc, #88]	; (8000ca0 <HAL_GPIO_Init+0x2c8>)
 8000c48:	4013      	ands	r3, r2
 8000c4a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d025      	beq.n	8000ca4 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c58:	4b11      	ldr	r3, [pc, #68]	; (8000ca0 <HAL_GPIO_Init+0x2c8>)
 8000c5a:	685a      	ldr	r2, [r3, #4]
 8000c5c:	4910      	ldr	r1, [pc, #64]	; (8000ca0 <HAL_GPIO_Init+0x2c8>)
 8000c5e:	69bb      	ldr	r3, [r7, #24]
 8000c60:	4313      	orrs	r3, r2
 8000c62:	604b      	str	r3, [r1, #4]
 8000c64:	e025      	b.n	8000cb2 <HAL_GPIO_Init+0x2da>
 8000c66:	bf00      	nop
 8000c68:	10320000 	.word	0x10320000
 8000c6c:	10310000 	.word	0x10310000
 8000c70:	10220000 	.word	0x10220000
 8000c74:	10210000 	.word	0x10210000
 8000c78:	10120000 	.word	0x10120000
 8000c7c:	10110000 	.word	0x10110000
 8000c80:	40021000 	.word	0x40021000
 8000c84:	40010000 	.word	0x40010000
 8000c88:	40010800 	.word	0x40010800
 8000c8c:	40010c00 	.word	0x40010c00
 8000c90:	40011000 	.word	0x40011000
 8000c94:	40011400 	.word	0x40011400
 8000c98:	40011800 	.word	0x40011800
 8000c9c:	40011c00 	.word	0x40011c00
 8000ca0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ca4:	4b15      	ldr	r3, [pc, #84]	; (8000cfc <HAL_GPIO_Init+0x324>)
 8000ca6:	685a      	ldr	r2, [r3, #4]
 8000ca8:	69bb      	ldr	r3, [r7, #24]
 8000caa:	43db      	mvns	r3, r3
 8000cac:	4913      	ldr	r1, [pc, #76]	; (8000cfc <HAL_GPIO_Init+0x324>)
 8000cae:	4013      	ands	r3, r2
 8000cb0:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d006      	beq.n	8000ccc <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000cbe:	4b0f      	ldr	r3, [pc, #60]	; (8000cfc <HAL_GPIO_Init+0x324>)
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	490e      	ldr	r1, [pc, #56]	; (8000cfc <HAL_GPIO_Init+0x324>)
 8000cc4:	69bb      	ldr	r3, [r7, #24]
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	600b      	str	r3, [r1, #0]
 8000cca:	e006      	b.n	8000cda <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ccc:	4b0b      	ldr	r3, [pc, #44]	; (8000cfc <HAL_GPIO_Init+0x324>)
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	69bb      	ldr	r3, [r7, #24]
 8000cd2:	43db      	mvns	r3, r3
 8000cd4:	4909      	ldr	r1, [pc, #36]	; (8000cfc <HAL_GPIO_Init+0x324>)
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cdc:	3301      	adds	r3, #1
 8000cde:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce6:	fa22 f303 	lsr.w	r3, r2, r3
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	f47f ae7e 	bne.w	80009ec <HAL_GPIO_Init+0x14>
  }
}
 8000cf0:	bf00      	nop
 8000cf2:	bf00      	nop
 8000cf4:	372c      	adds	r7, #44	; 0x2c
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bc80      	pop	{r7}
 8000cfa:	4770      	bx	lr
 8000cfc:	40010400 	.word	0x40010400

08000d00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b086      	sub	sp, #24
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d101      	bne.n	8000d12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	e272      	b.n	80011f8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f003 0301 	and.w	r3, r3, #1
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	f000 8087 	beq.w	8000e2e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d20:	4b92      	ldr	r3, [pc, #584]	; (8000f6c <HAL_RCC_OscConfig+0x26c>)
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	f003 030c 	and.w	r3, r3, #12
 8000d28:	2b04      	cmp	r3, #4
 8000d2a:	d00c      	beq.n	8000d46 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d2c:	4b8f      	ldr	r3, [pc, #572]	; (8000f6c <HAL_RCC_OscConfig+0x26c>)
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	f003 030c 	and.w	r3, r3, #12
 8000d34:	2b08      	cmp	r3, #8
 8000d36:	d112      	bne.n	8000d5e <HAL_RCC_OscConfig+0x5e>
 8000d38:	4b8c      	ldr	r3, [pc, #560]	; (8000f6c <HAL_RCC_OscConfig+0x26c>)
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d44:	d10b      	bne.n	8000d5e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d46:	4b89      	ldr	r3, [pc, #548]	; (8000f6c <HAL_RCC_OscConfig+0x26c>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d06c      	beq.n	8000e2c <HAL_RCC_OscConfig+0x12c>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d168      	bne.n	8000e2c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	e24c      	b.n	80011f8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d66:	d106      	bne.n	8000d76 <HAL_RCC_OscConfig+0x76>
 8000d68:	4b80      	ldr	r3, [pc, #512]	; (8000f6c <HAL_RCC_OscConfig+0x26c>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a7f      	ldr	r2, [pc, #508]	; (8000f6c <HAL_RCC_OscConfig+0x26c>)
 8000d6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d72:	6013      	str	r3, [r2, #0]
 8000d74:	e02e      	b.n	8000dd4 <HAL_RCC_OscConfig+0xd4>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d10c      	bne.n	8000d98 <HAL_RCC_OscConfig+0x98>
 8000d7e:	4b7b      	ldr	r3, [pc, #492]	; (8000f6c <HAL_RCC_OscConfig+0x26c>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a7a      	ldr	r2, [pc, #488]	; (8000f6c <HAL_RCC_OscConfig+0x26c>)
 8000d84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d88:	6013      	str	r3, [r2, #0]
 8000d8a:	4b78      	ldr	r3, [pc, #480]	; (8000f6c <HAL_RCC_OscConfig+0x26c>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a77      	ldr	r2, [pc, #476]	; (8000f6c <HAL_RCC_OscConfig+0x26c>)
 8000d90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d94:	6013      	str	r3, [r2, #0]
 8000d96:	e01d      	b.n	8000dd4 <HAL_RCC_OscConfig+0xd4>
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000da0:	d10c      	bne.n	8000dbc <HAL_RCC_OscConfig+0xbc>
 8000da2:	4b72      	ldr	r3, [pc, #456]	; (8000f6c <HAL_RCC_OscConfig+0x26c>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a71      	ldr	r2, [pc, #452]	; (8000f6c <HAL_RCC_OscConfig+0x26c>)
 8000da8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dac:	6013      	str	r3, [r2, #0]
 8000dae:	4b6f      	ldr	r3, [pc, #444]	; (8000f6c <HAL_RCC_OscConfig+0x26c>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a6e      	ldr	r2, [pc, #440]	; (8000f6c <HAL_RCC_OscConfig+0x26c>)
 8000db4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000db8:	6013      	str	r3, [r2, #0]
 8000dba:	e00b      	b.n	8000dd4 <HAL_RCC_OscConfig+0xd4>
 8000dbc:	4b6b      	ldr	r3, [pc, #428]	; (8000f6c <HAL_RCC_OscConfig+0x26c>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a6a      	ldr	r2, [pc, #424]	; (8000f6c <HAL_RCC_OscConfig+0x26c>)
 8000dc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dc6:	6013      	str	r3, [r2, #0]
 8000dc8:	4b68      	ldr	r3, [pc, #416]	; (8000f6c <HAL_RCC_OscConfig+0x26c>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a67      	ldr	r2, [pc, #412]	; (8000f6c <HAL_RCC_OscConfig+0x26c>)
 8000dce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dd2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d013      	beq.n	8000e04 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ddc:	f7ff fcea 	bl	80007b4 <HAL_GetTick>
 8000de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000de2:	e008      	b.n	8000df6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000de4:	f7ff fce6 	bl	80007b4 <HAL_GetTick>
 8000de8:	4602      	mov	r2, r0
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	2b64      	cmp	r3, #100	; 0x64
 8000df0:	d901      	bls.n	8000df6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000df2:	2303      	movs	r3, #3
 8000df4:	e200      	b.n	80011f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000df6:	4b5d      	ldr	r3, [pc, #372]	; (8000f6c <HAL_RCC_OscConfig+0x26c>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d0f0      	beq.n	8000de4 <HAL_RCC_OscConfig+0xe4>
 8000e02:	e014      	b.n	8000e2e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e04:	f7ff fcd6 	bl	80007b4 <HAL_GetTick>
 8000e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e0a:	e008      	b.n	8000e1e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e0c:	f7ff fcd2 	bl	80007b4 <HAL_GetTick>
 8000e10:	4602      	mov	r2, r0
 8000e12:	693b      	ldr	r3, [r7, #16]
 8000e14:	1ad3      	subs	r3, r2, r3
 8000e16:	2b64      	cmp	r3, #100	; 0x64
 8000e18:	d901      	bls.n	8000e1e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	e1ec      	b.n	80011f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e1e:	4b53      	ldr	r3, [pc, #332]	; (8000f6c <HAL_RCC_OscConfig+0x26c>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d1f0      	bne.n	8000e0c <HAL_RCC_OscConfig+0x10c>
 8000e2a:	e000      	b.n	8000e2e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f003 0302 	and.w	r3, r3, #2
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d063      	beq.n	8000f02 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e3a:	4b4c      	ldr	r3, [pc, #304]	; (8000f6c <HAL_RCC_OscConfig+0x26c>)
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	f003 030c 	and.w	r3, r3, #12
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d00b      	beq.n	8000e5e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e46:	4b49      	ldr	r3, [pc, #292]	; (8000f6c <HAL_RCC_OscConfig+0x26c>)
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	f003 030c 	and.w	r3, r3, #12
 8000e4e:	2b08      	cmp	r3, #8
 8000e50:	d11c      	bne.n	8000e8c <HAL_RCC_OscConfig+0x18c>
 8000e52:	4b46      	ldr	r3, [pc, #280]	; (8000f6c <HAL_RCC_OscConfig+0x26c>)
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d116      	bne.n	8000e8c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e5e:	4b43      	ldr	r3, [pc, #268]	; (8000f6c <HAL_RCC_OscConfig+0x26c>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f003 0302 	and.w	r3, r3, #2
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d005      	beq.n	8000e76 <HAL_RCC_OscConfig+0x176>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	691b      	ldr	r3, [r3, #16]
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d001      	beq.n	8000e76 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000e72:	2301      	movs	r3, #1
 8000e74:	e1c0      	b.n	80011f8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e76:	4b3d      	ldr	r3, [pc, #244]	; (8000f6c <HAL_RCC_OscConfig+0x26c>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	695b      	ldr	r3, [r3, #20]
 8000e82:	00db      	lsls	r3, r3, #3
 8000e84:	4939      	ldr	r1, [pc, #228]	; (8000f6c <HAL_RCC_OscConfig+0x26c>)
 8000e86:	4313      	orrs	r3, r2
 8000e88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e8a:	e03a      	b.n	8000f02 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	691b      	ldr	r3, [r3, #16]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d020      	beq.n	8000ed6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e94:	4b36      	ldr	r3, [pc, #216]	; (8000f70 <HAL_RCC_OscConfig+0x270>)
 8000e96:	2201      	movs	r2, #1
 8000e98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e9a:	f7ff fc8b 	bl	80007b4 <HAL_GetTick>
 8000e9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ea0:	e008      	b.n	8000eb4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ea2:	f7ff fc87 	bl	80007b4 <HAL_GetTick>
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	1ad3      	subs	r3, r2, r3
 8000eac:	2b02      	cmp	r3, #2
 8000eae:	d901      	bls.n	8000eb4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000eb0:	2303      	movs	r3, #3
 8000eb2:	e1a1      	b.n	80011f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000eb4:	4b2d      	ldr	r3, [pc, #180]	; (8000f6c <HAL_RCC_OscConfig+0x26c>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f003 0302 	and.w	r3, r3, #2
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d0f0      	beq.n	8000ea2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ec0:	4b2a      	ldr	r3, [pc, #168]	; (8000f6c <HAL_RCC_OscConfig+0x26c>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	695b      	ldr	r3, [r3, #20]
 8000ecc:	00db      	lsls	r3, r3, #3
 8000ece:	4927      	ldr	r1, [pc, #156]	; (8000f6c <HAL_RCC_OscConfig+0x26c>)
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	600b      	str	r3, [r1, #0]
 8000ed4:	e015      	b.n	8000f02 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ed6:	4b26      	ldr	r3, [pc, #152]	; (8000f70 <HAL_RCC_OscConfig+0x270>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000edc:	f7ff fc6a 	bl	80007b4 <HAL_GetTick>
 8000ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ee2:	e008      	b.n	8000ef6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ee4:	f7ff fc66 	bl	80007b4 <HAL_GetTick>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	2b02      	cmp	r3, #2
 8000ef0:	d901      	bls.n	8000ef6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000ef2:	2303      	movs	r3, #3
 8000ef4:	e180      	b.n	80011f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ef6:	4b1d      	ldr	r3, [pc, #116]	; (8000f6c <HAL_RCC_OscConfig+0x26c>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f003 0302 	and.w	r3, r3, #2
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d1f0      	bne.n	8000ee4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f003 0308 	and.w	r3, r3, #8
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d03a      	beq.n	8000f84 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	699b      	ldr	r3, [r3, #24]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d019      	beq.n	8000f4a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f16:	4b17      	ldr	r3, [pc, #92]	; (8000f74 <HAL_RCC_OscConfig+0x274>)
 8000f18:	2201      	movs	r2, #1
 8000f1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f1c:	f7ff fc4a 	bl	80007b4 <HAL_GetTick>
 8000f20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f22:	e008      	b.n	8000f36 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f24:	f7ff fc46 	bl	80007b4 <HAL_GetTick>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	2b02      	cmp	r3, #2
 8000f30:	d901      	bls.n	8000f36 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f32:	2303      	movs	r3, #3
 8000f34:	e160      	b.n	80011f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f36:	4b0d      	ldr	r3, [pc, #52]	; (8000f6c <HAL_RCC_OscConfig+0x26c>)
 8000f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f3a:	f003 0302 	and.w	r3, r3, #2
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d0f0      	beq.n	8000f24 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f42:	2001      	movs	r0, #1
 8000f44:	f000 face 	bl	80014e4 <RCC_Delay>
 8000f48:	e01c      	b.n	8000f84 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f4a:	4b0a      	ldr	r3, [pc, #40]	; (8000f74 <HAL_RCC_OscConfig+0x274>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f50:	f7ff fc30 	bl	80007b4 <HAL_GetTick>
 8000f54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f56:	e00f      	b.n	8000f78 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f58:	f7ff fc2c 	bl	80007b4 <HAL_GetTick>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	2b02      	cmp	r3, #2
 8000f64:	d908      	bls.n	8000f78 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000f66:	2303      	movs	r3, #3
 8000f68:	e146      	b.n	80011f8 <HAL_RCC_OscConfig+0x4f8>
 8000f6a:	bf00      	nop
 8000f6c:	40021000 	.word	0x40021000
 8000f70:	42420000 	.word	0x42420000
 8000f74:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f78:	4b92      	ldr	r3, [pc, #584]	; (80011c4 <HAL_RCC_OscConfig+0x4c4>)
 8000f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f7c:	f003 0302 	and.w	r3, r3, #2
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d1e9      	bne.n	8000f58 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f003 0304 	and.w	r3, r3, #4
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	f000 80a6 	beq.w	80010de <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f92:	2300      	movs	r3, #0
 8000f94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f96:	4b8b      	ldr	r3, [pc, #556]	; (80011c4 <HAL_RCC_OscConfig+0x4c4>)
 8000f98:	69db      	ldr	r3, [r3, #28]
 8000f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d10d      	bne.n	8000fbe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fa2:	4b88      	ldr	r3, [pc, #544]	; (80011c4 <HAL_RCC_OscConfig+0x4c4>)
 8000fa4:	69db      	ldr	r3, [r3, #28]
 8000fa6:	4a87      	ldr	r2, [pc, #540]	; (80011c4 <HAL_RCC_OscConfig+0x4c4>)
 8000fa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fac:	61d3      	str	r3, [r2, #28]
 8000fae:	4b85      	ldr	r3, [pc, #532]	; (80011c4 <HAL_RCC_OscConfig+0x4c4>)
 8000fb0:	69db      	ldr	r3, [r3, #28]
 8000fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb6:	60bb      	str	r3, [r7, #8]
 8000fb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fbe:	4b82      	ldr	r3, [pc, #520]	; (80011c8 <HAL_RCC_OscConfig+0x4c8>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d118      	bne.n	8000ffc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fca:	4b7f      	ldr	r3, [pc, #508]	; (80011c8 <HAL_RCC_OscConfig+0x4c8>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a7e      	ldr	r2, [pc, #504]	; (80011c8 <HAL_RCC_OscConfig+0x4c8>)
 8000fd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fd6:	f7ff fbed 	bl	80007b4 <HAL_GetTick>
 8000fda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fdc:	e008      	b.n	8000ff0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fde:	f7ff fbe9 	bl	80007b4 <HAL_GetTick>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	1ad3      	subs	r3, r2, r3
 8000fe8:	2b64      	cmp	r3, #100	; 0x64
 8000fea:	d901      	bls.n	8000ff0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000fec:	2303      	movs	r3, #3
 8000fee:	e103      	b.n	80011f8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ff0:	4b75      	ldr	r3, [pc, #468]	; (80011c8 <HAL_RCC_OscConfig+0x4c8>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d0f0      	beq.n	8000fde <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	2b01      	cmp	r3, #1
 8001002:	d106      	bne.n	8001012 <HAL_RCC_OscConfig+0x312>
 8001004:	4b6f      	ldr	r3, [pc, #444]	; (80011c4 <HAL_RCC_OscConfig+0x4c4>)
 8001006:	6a1b      	ldr	r3, [r3, #32]
 8001008:	4a6e      	ldr	r2, [pc, #440]	; (80011c4 <HAL_RCC_OscConfig+0x4c4>)
 800100a:	f043 0301 	orr.w	r3, r3, #1
 800100e:	6213      	str	r3, [r2, #32]
 8001010:	e02d      	b.n	800106e <HAL_RCC_OscConfig+0x36e>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	68db      	ldr	r3, [r3, #12]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d10c      	bne.n	8001034 <HAL_RCC_OscConfig+0x334>
 800101a:	4b6a      	ldr	r3, [pc, #424]	; (80011c4 <HAL_RCC_OscConfig+0x4c4>)
 800101c:	6a1b      	ldr	r3, [r3, #32]
 800101e:	4a69      	ldr	r2, [pc, #420]	; (80011c4 <HAL_RCC_OscConfig+0x4c4>)
 8001020:	f023 0301 	bic.w	r3, r3, #1
 8001024:	6213      	str	r3, [r2, #32]
 8001026:	4b67      	ldr	r3, [pc, #412]	; (80011c4 <HAL_RCC_OscConfig+0x4c4>)
 8001028:	6a1b      	ldr	r3, [r3, #32]
 800102a:	4a66      	ldr	r2, [pc, #408]	; (80011c4 <HAL_RCC_OscConfig+0x4c4>)
 800102c:	f023 0304 	bic.w	r3, r3, #4
 8001030:	6213      	str	r3, [r2, #32]
 8001032:	e01c      	b.n	800106e <HAL_RCC_OscConfig+0x36e>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	2b05      	cmp	r3, #5
 800103a:	d10c      	bne.n	8001056 <HAL_RCC_OscConfig+0x356>
 800103c:	4b61      	ldr	r3, [pc, #388]	; (80011c4 <HAL_RCC_OscConfig+0x4c4>)
 800103e:	6a1b      	ldr	r3, [r3, #32]
 8001040:	4a60      	ldr	r2, [pc, #384]	; (80011c4 <HAL_RCC_OscConfig+0x4c4>)
 8001042:	f043 0304 	orr.w	r3, r3, #4
 8001046:	6213      	str	r3, [r2, #32]
 8001048:	4b5e      	ldr	r3, [pc, #376]	; (80011c4 <HAL_RCC_OscConfig+0x4c4>)
 800104a:	6a1b      	ldr	r3, [r3, #32]
 800104c:	4a5d      	ldr	r2, [pc, #372]	; (80011c4 <HAL_RCC_OscConfig+0x4c4>)
 800104e:	f043 0301 	orr.w	r3, r3, #1
 8001052:	6213      	str	r3, [r2, #32]
 8001054:	e00b      	b.n	800106e <HAL_RCC_OscConfig+0x36e>
 8001056:	4b5b      	ldr	r3, [pc, #364]	; (80011c4 <HAL_RCC_OscConfig+0x4c4>)
 8001058:	6a1b      	ldr	r3, [r3, #32]
 800105a:	4a5a      	ldr	r2, [pc, #360]	; (80011c4 <HAL_RCC_OscConfig+0x4c4>)
 800105c:	f023 0301 	bic.w	r3, r3, #1
 8001060:	6213      	str	r3, [r2, #32]
 8001062:	4b58      	ldr	r3, [pc, #352]	; (80011c4 <HAL_RCC_OscConfig+0x4c4>)
 8001064:	6a1b      	ldr	r3, [r3, #32]
 8001066:	4a57      	ldr	r2, [pc, #348]	; (80011c4 <HAL_RCC_OscConfig+0x4c4>)
 8001068:	f023 0304 	bic.w	r3, r3, #4
 800106c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	68db      	ldr	r3, [r3, #12]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d015      	beq.n	80010a2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001076:	f7ff fb9d 	bl	80007b4 <HAL_GetTick>
 800107a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800107c:	e00a      	b.n	8001094 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800107e:	f7ff fb99 	bl	80007b4 <HAL_GetTick>
 8001082:	4602      	mov	r2, r0
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	1ad3      	subs	r3, r2, r3
 8001088:	f241 3288 	movw	r2, #5000	; 0x1388
 800108c:	4293      	cmp	r3, r2
 800108e:	d901      	bls.n	8001094 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001090:	2303      	movs	r3, #3
 8001092:	e0b1      	b.n	80011f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001094:	4b4b      	ldr	r3, [pc, #300]	; (80011c4 <HAL_RCC_OscConfig+0x4c4>)
 8001096:	6a1b      	ldr	r3, [r3, #32]
 8001098:	f003 0302 	and.w	r3, r3, #2
 800109c:	2b00      	cmp	r3, #0
 800109e:	d0ee      	beq.n	800107e <HAL_RCC_OscConfig+0x37e>
 80010a0:	e014      	b.n	80010cc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010a2:	f7ff fb87 	bl	80007b4 <HAL_GetTick>
 80010a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010a8:	e00a      	b.n	80010c0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010aa:	f7ff fb83 	bl	80007b4 <HAL_GetTick>
 80010ae:	4602      	mov	r2, r0
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	1ad3      	subs	r3, r2, r3
 80010b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d901      	bls.n	80010c0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80010bc:	2303      	movs	r3, #3
 80010be:	e09b      	b.n	80011f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010c0:	4b40      	ldr	r3, [pc, #256]	; (80011c4 <HAL_RCC_OscConfig+0x4c4>)
 80010c2:	6a1b      	ldr	r3, [r3, #32]
 80010c4:	f003 0302 	and.w	r3, r3, #2
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d1ee      	bne.n	80010aa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80010cc:	7dfb      	ldrb	r3, [r7, #23]
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d105      	bne.n	80010de <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010d2:	4b3c      	ldr	r3, [pc, #240]	; (80011c4 <HAL_RCC_OscConfig+0x4c4>)
 80010d4:	69db      	ldr	r3, [r3, #28]
 80010d6:	4a3b      	ldr	r2, [pc, #236]	; (80011c4 <HAL_RCC_OscConfig+0x4c4>)
 80010d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80010dc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	69db      	ldr	r3, [r3, #28]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	f000 8087 	beq.w	80011f6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010e8:	4b36      	ldr	r3, [pc, #216]	; (80011c4 <HAL_RCC_OscConfig+0x4c4>)
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f003 030c 	and.w	r3, r3, #12
 80010f0:	2b08      	cmp	r3, #8
 80010f2:	d061      	beq.n	80011b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	69db      	ldr	r3, [r3, #28]
 80010f8:	2b02      	cmp	r3, #2
 80010fa:	d146      	bne.n	800118a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010fc:	4b33      	ldr	r3, [pc, #204]	; (80011cc <HAL_RCC_OscConfig+0x4cc>)
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001102:	f7ff fb57 	bl	80007b4 <HAL_GetTick>
 8001106:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001108:	e008      	b.n	800111c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800110a:	f7ff fb53 	bl	80007b4 <HAL_GetTick>
 800110e:	4602      	mov	r2, r0
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	1ad3      	subs	r3, r2, r3
 8001114:	2b02      	cmp	r3, #2
 8001116:	d901      	bls.n	800111c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001118:	2303      	movs	r3, #3
 800111a:	e06d      	b.n	80011f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800111c:	4b29      	ldr	r3, [pc, #164]	; (80011c4 <HAL_RCC_OscConfig+0x4c4>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001124:	2b00      	cmp	r3, #0
 8001126:	d1f0      	bne.n	800110a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6a1b      	ldr	r3, [r3, #32]
 800112c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001130:	d108      	bne.n	8001144 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001132:	4b24      	ldr	r3, [pc, #144]	; (80011c4 <HAL_RCC_OscConfig+0x4c4>)
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	4921      	ldr	r1, [pc, #132]	; (80011c4 <HAL_RCC_OscConfig+0x4c4>)
 8001140:	4313      	orrs	r3, r2
 8001142:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001144:	4b1f      	ldr	r3, [pc, #124]	; (80011c4 <HAL_RCC_OscConfig+0x4c4>)
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6a19      	ldr	r1, [r3, #32]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001154:	430b      	orrs	r3, r1
 8001156:	491b      	ldr	r1, [pc, #108]	; (80011c4 <HAL_RCC_OscConfig+0x4c4>)
 8001158:	4313      	orrs	r3, r2
 800115a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800115c:	4b1b      	ldr	r3, [pc, #108]	; (80011cc <HAL_RCC_OscConfig+0x4cc>)
 800115e:	2201      	movs	r2, #1
 8001160:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001162:	f7ff fb27 	bl	80007b4 <HAL_GetTick>
 8001166:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001168:	e008      	b.n	800117c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800116a:	f7ff fb23 	bl	80007b4 <HAL_GetTick>
 800116e:	4602      	mov	r2, r0
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	1ad3      	subs	r3, r2, r3
 8001174:	2b02      	cmp	r3, #2
 8001176:	d901      	bls.n	800117c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001178:	2303      	movs	r3, #3
 800117a:	e03d      	b.n	80011f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800117c:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <HAL_RCC_OscConfig+0x4c4>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001184:	2b00      	cmp	r3, #0
 8001186:	d0f0      	beq.n	800116a <HAL_RCC_OscConfig+0x46a>
 8001188:	e035      	b.n	80011f6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800118a:	4b10      	ldr	r3, [pc, #64]	; (80011cc <HAL_RCC_OscConfig+0x4cc>)
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001190:	f7ff fb10 	bl	80007b4 <HAL_GetTick>
 8001194:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001196:	e008      	b.n	80011aa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001198:	f7ff fb0c 	bl	80007b4 <HAL_GetTick>
 800119c:	4602      	mov	r2, r0
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d901      	bls.n	80011aa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80011a6:	2303      	movs	r3, #3
 80011a8:	e026      	b.n	80011f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011aa:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <HAL_RCC_OscConfig+0x4c4>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d1f0      	bne.n	8001198 <HAL_RCC_OscConfig+0x498>
 80011b6:	e01e      	b.n	80011f6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	69db      	ldr	r3, [r3, #28]
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d107      	bne.n	80011d0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80011c0:	2301      	movs	r3, #1
 80011c2:	e019      	b.n	80011f8 <HAL_RCC_OscConfig+0x4f8>
 80011c4:	40021000 	.word	0x40021000
 80011c8:	40007000 	.word	0x40007000
 80011cc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80011d0:	4b0b      	ldr	r3, [pc, #44]	; (8001200 <HAL_RCC_OscConfig+0x500>)
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6a1b      	ldr	r3, [r3, #32]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d106      	bne.n	80011f2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d001      	beq.n	80011f6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e000      	b.n	80011f8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80011f6:	2300      	movs	r3, #0
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3718      	adds	r7, #24
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40021000 	.word	0x40021000

08001204 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d101      	bne.n	8001218 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001214:	2301      	movs	r3, #1
 8001216:	e0d0      	b.n	80013ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001218:	4b6a      	ldr	r3, [pc, #424]	; (80013c4 <HAL_RCC_ClockConfig+0x1c0>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 0307 	and.w	r3, r3, #7
 8001220:	683a      	ldr	r2, [r7, #0]
 8001222:	429a      	cmp	r2, r3
 8001224:	d910      	bls.n	8001248 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001226:	4b67      	ldr	r3, [pc, #412]	; (80013c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f023 0207 	bic.w	r2, r3, #7
 800122e:	4965      	ldr	r1, [pc, #404]	; (80013c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	4313      	orrs	r3, r2
 8001234:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001236:	4b63      	ldr	r3, [pc, #396]	; (80013c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 0307 	and.w	r3, r3, #7
 800123e:	683a      	ldr	r2, [r7, #0]
 8001240:	429a      	cmp	r2, r3
 8001242:	d001      	beq.n	8001248 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001244:	2301      	movs	r3, #1
 8001246:	e0b8      	b.n	80013ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f003 0302 	and.w	r3, r3, #2
 8001250:	2b00      	cmp	r3, #0
 8001252:	d020      	beq.n	8001296 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f003 0304 	and.w	r3, r3, #4
 800125c:	2b00      	cmp	r3, #0
 800125e:	d005      	beq.n	800126c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001260:	4b59      	ldr	r3, [pc, #356]	; (80013c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	4a58      	ldr	r2, [pc, #352]	; (80013c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001266:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800126a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f003 0308 	and.w	r3, r3, #8
 8001274:	2b00      	cmp	r3, #0
 8001276:	d005      	beq.n	8001284 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001278:	4b53      	ldr	r3, [pc, #332]	; (80013c8 <HAL_RCC_ClockConfig+0x1c4>)
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	4a52      	ldr	r2, [pc, #328]	; (80013c8 <HAL_RCC_ClockConfig+0x1c4>)
 800127e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001282:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001284:	4b50      	ldr	r3, [pc, #320]	; (80013c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	494d      	ldr	r1, [pc, #308]	; (80013c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001292:	4313      	orrs	r3, r2
 8001294:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d040      	beq.n	8001324 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d107      	bne.n	80012ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012aa:	4b47      	ldr	r3, [pc, #284]	; (80013c8 <HAL_RCC_ClockConfig+0x1c4>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d115      	bne.n	80012e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e07f      	b.n	80013ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d107      	bne.n	80012d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012c2:	4b41      	ldr	r3, [pc, #260]	; (80013c8 <HAL_RCC_ClockConfig+0x1c4>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d109      	bne.n	80012e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e073      	b.n	80013ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012d2:	4b3d      	ldr	r3, [pc, #244]	; (80013c8 <HAL_RCC_ClockConfig+0x1c4>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 0302 	and.w	r3, r3, #2
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d101      	bne.n	80012e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e06b      	b.n	80013ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012e2:	4b39      	ldr	r3, [pc, #228]	; (80013c8 <HAL_RCC_ClockConfig+0x1c4>)
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f023 0203 	bic.w	r2, r3, #3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	4936      	ldr	r1, [pc, #216]	; (80013c8 <HAL_RCC_ClockConfig+0x1c4>)
 80012f0:	4313      	orrs	r3, r2
 80012f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012f4:	f7ff fa5e 	bl	80007b4 <HAL_GetTick>
 80012f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012fa:	e00a      	b.n	8001312 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012fc:	f7ff fa5a 	bl	80007b4 <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	f241 3288 	movw	r2, #5000	; 0x1388
 800130a:	4293      	cmp	r3, r2
 800130c:	d901      	bls.n	8001312 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	e053      	b.n	80013ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001312:	4b2d      	ldr	r3, [pc, #180]	; (80013c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f003 020c 	and.w	r2, r3, #12
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	429a      	cmp	r2, r3
 8001322:	d1eb      	bne.n	80012fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001324:	4b27      	ldr	r3, [pc, #156]	; (80013c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 0307 	and.w	r3, r3, #7
 800132c:	683a      	ldr	r2, [r7, #0]
 800132e:	429a      	cmp	r2, r3
 8001330:	d210      	bcs.n	8001354 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001332:	4b24      	ldr	r3, [pc, #144]	; (80013c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f023 0207 	bic.w	r2, r3, #7
 800133a:	4922      	ldr	r1, [pc, #136]	; (80013c4 <HAL_RCC_ClockConfig+0x1c0>)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	4313      	orrs	r3, r2
 8001340:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001342:	4b20      	ldr	r3, [pc, #128]	; (80013c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0307 	and.w	r3, r3, #7
 800134a:	683a      	ldr	r2, [r7, #0]
 800134c:	429a      	cmp	r2, r3
 800134e:	d001      	beq.n	8001354 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	e032      	b.n	80013ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f003 0304 	and.w	r3, r3, #4
 800135c:	2b00      	cmp	r3, #0
 800135e:	d008      	beq.n	8001372 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001360:	4b19      	ldr	r3, [pc, #100]	; (80013c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	4916      	ldr	r1, [pc, #88]	; (80013c8 <HAL_RCC_ClockConfig+0x1c4>)
 800136e:	4313      	orrs	r3, r2
 8001370:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 0308 	and.w	r3, r3, #8
 800137a:	2b00      	cmp	r3, #0
 800137c:	d009      	beq.n	8001392 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800137e:	4b12      	ldr	r3, [pc, #72]	; (80013c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	691b      	ldr	r3, [r3, #16]
 800138a:	00db      	lsls	r3, r3, #3
 800138c:	490e      	ldr	r1, [pc, #56]	; (80013c8 <HAL_RCC_ClockConfig+0x1c4>)
 800138e:	4313      	orrs	r3, r2
 8001390:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001392:	f000 f821 	bl	80013d8 <HAL_RCC_GetSysClockFreq>
 8001396:	4602      	mov	r2, r0
 8001398:	4b0b      	ldr	r3, [pc, #44]	; (80013c8 <HAL_RCC_ClockConfig+0x1c4>)
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	091b      	lsrs	r3, r3, #4
 800139e:	f003 030f 	and.w	r3, r3, #15
 80013a2:	490a      	ldr	r1, [pc, #40]	; (80013cc <HAL_RCC_ClockConfig+0x1c8>)
 80013a4:	5ccb      	ldrb	r3, [r1, r3]
 80013a6:	fa22 f303 	lsr.w	r3, r2, r3
 80013aa:	4a09      	ldr	r2, [pc, #36]	; (80013d0 <HAL_RCC_ClockConfig+0x1cc>)
 80013ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80013ae:	4b09      	ldr	r3, [pc, #36]	; (80013d4 <HAL_RCC_ClockConfig+0x1d0>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff f9bc 	bl	8000730 <HAL_InitTick>

  return HAL_OK;
 80013b8:	2300      	movs	r3, #0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3710      	adds	r7, #16
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40022000 	.word	0x40022000
 80013c8:	40021000 	.word	0x40021000
 80013cc:	08002828 	.word	0x08002828
 80013d0:	20000000 	.word	0x20000000
 80013d4:	20000004 	.word	0x20000004

080013d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	b087      	sub	sp, #28
 80013dc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80013de:	2300      	movs	r3, #0
 80013e0:	60fb      	str	r3, [r7, #12]
 80013e2:	2300      	movs	r3, #0
 80013e4:	60bb      	str	r3, [r7, #8]
 80013e6:	2300      	movs	r3, #0
 80013e8:	617b      	str	r3, [r7, #20]
 80013ea:	2300      	movs	r3, #0
 80013ec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80013ee:	2300      	movs	r3, #0
 80013f0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80013f2:	4b1e      	ldr	r3, [pc, #120]	; (800146c <HAL_RCC_GetSysClockFreq+0x94>)
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	f003 030c 	and.w	r3, r3, #12
 80013fe:	2b04      	cmp	r3, #4
 8001400:	d002      	beq.n	8001408 <HAL_RCC_GetSysClockFreq+0x30>
 8001402:	2b08      	cmp	r3, #8
 8001404:	d003      	beq.n	800140e <HAL_RCC_GetSysClockFreq+0x36>
 8001406:	e027      	b.n	8001458 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001408:	4b19      	ldr	r3, [pc, #100]	; (8001470 <HAL_RCC_GetSysClockFreq+0x98>)
 800140a:	613b      	str	r3, [r7, #16]
      break;
 800140c:	e027      	b.n	800145e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	0c9b      	lsrs	r3, r3, #18
 8001412:	f003 030f 	and.w	r3, r3, #15
 8001416:	4a17      	ldr	r2, [pc, #92]	; (8001474 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001418:	5cd3      	ldrb	r3, [r2, r3]
 800141a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d010      	beq.n	8001448 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001426:	4b11      	ldr	r3, [pc, #68]	; (800146c <HAL_RCC_GetSysClockFreq+0x94>)
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	0c5b      	lsrs	r3, r3, #17
 800142c:	f003 0301 	and.w	r3, r3, #1
 8001430:	4a11      	ldr	r2, [pc, #68]	; (8001478 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001432:	5cd3      	ldrb	r3, [r2, r3]
 8001434:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a0d      	ldr	r2, [pc, #52]	; (8001470 <HAL_RCC_GetSysClockFreq+0x98>)
 800143a:	fb03 f202 	mul.w	r2, r3, r2
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	fbb2 f3f3 	udiv	r3, r2, r3
 8001444:	617b      	str	r3, [r7, #20]
 8001446:	e004      	b.n	8001452 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	4a0c      	ldr	r2, [pc, #48]	; (800147c <HAL_RCC_GetSysClockFreq+0xa4>)
 800144c:	fb02 f303 	mul.w	r3, r2, r3
 8001450:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	613b      	str	r3, [r7, #16]
      break;
 8001456:	e002      	b.n	800145e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001458:	4b05      	ldr	r3, [pc, #20]	; (8001470 <HAL_RCC_GetSysClockFreq+0x98>)
 800145a:	613b      	str	r3, [r7, #16]
      break;
 800145c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800145e:	693b      	ldr	r3, [r7, #16]
}
 8001460:	4618      	mov	r0, r3
 8001462:	371c      	adds	r7, #28
 8001464:	46bd      	mov	sp, r7
 8001466:	bc80      	pop	{r7}
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	40021000 	.word	0x40021000
 8001470:	007a1200 	.word	0x007a1200
 8001474:	08002840 	.word	0x08002840
 8001478:	08002850 	.word	0x08002850
 800147c:	003d0900 	.word	0x003d0900

08001480 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001484:	4b02      	ldr	r3, [pc, #8]	; (8001490 <HAL_RCC_GetHCLKFreq+0x10>)
 8001486:	681b      	ldr	r3, [r3, #0]
}
 8001488:	4618      	mov	r0, r3
 800148a:	46bd      	mov	sp, r7
 800148c:	bc80      	pop	{r7}
 800148e:	4770      	bx	lr
 8001490:	20000000 	.word	0x20000000

08001494 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001498:	f7ff fff2 	bl	8001480 <HAL_RCC_GetHCLKFreq>
 800149c:	4602      	mov	r2, r0
 800149e:	4b05      	ldr	r3, [pc, #20]	; (80014b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	0a1b      	lsrs	r3, r3, #8
 80014a4:	f003 0307 	and.w	r3, r3, #7
 80014a8:	4903      	ldr	r1, [pc, #12]	; (80014b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80014aa:	5ccb      	ldrb	r3, [r1, r3]
 80014ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40021000 	.word	0x40021000
 80014b8:	08002838 	.word	0x08002838

080014bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80014c0:	f7ff ffde 	bl	8001480 <HAL_RCC_GetHCLKFreq>
 80014c4:	4602      	mov	r2, r0
 80014c6:	4b05      	ldr	r3, [pc, #20]	; (80014dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	0adb      	lsrs	r3, r3, #11
 80014cc:	f003 0307 	and.w	r3, r3, #7
 80014d0:	4903      	ldr	r1, [pc, #12]	; (80014e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80014d2:	5ccb      	ldrb	r3, [r1, r3]
 80014d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014d8:	4618      	mov	r0, r3
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	40021000 	.word	0x40021000
 80014e0:	08002838 	.word	0x08002838

080014e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80014ec:	4b0a      	ldr	r3, [pc, #40]	; (8001518 <RCC_Delay+0x34>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a0a      	ldr	r2, [pc, #40]	; (800151c <RCC_Delay+0x38>)
 80014f2:	fba2 2303 	umull	r2, r3, r2, r3
 80014f6:	0a5b      	lsrs	r3, r3, #9
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	fb02 f303 	mul.w	r3, r2, r3
 80014fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001500:	bf00      	nop
  }
  while (Delay --);
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	1e5a      	subs	r2, r3, #1
 8001506:	60fa      	str	r2, [r7, #12]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d1f9      	bne.n	8001500 <RCC_Delay+0x1c>
}
 800150c:	bf00      	nop
 800150e:	bf00      	nop
 8001510:	3714      	adds	r7, #20
 8001512:	46bd      	mov	sp, r7
 8001514:	bc80      	pop	{r7}
 8001516:	4770      	bx	lr
 8001518:	20000000 	.word	0x20000000
 800151c:	10624dd3 	.word	0x10624dd3

08001520 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d101      	bne.n	8001532 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e041      	b.n	80015b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001538:	b2db      	uxtb	r3, r3
 800153a:	2b00      	cmp	r3, #0
 800153c:	d106      	bne.n	800154c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2200      	movs	r2, #0
 8001542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f7ff f804 	bl	8000554 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2202      	movs	r2, #2
 8001550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	3304      	adds	r3, #4
 800155c:	4619      	mov	r1, r3
 800155e:	4610      	mov	r0, r2
 8001560:	f000 f94e 	bl	8001800 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2201      	movs	r2, #1
 8001568:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2201      	movs	r2, #1
 8001570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2201      	movs	r2, #1
 8001578:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2201      	movs	r2, #1
 8001580:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2201      	movs	r2, #1
 8001588:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2201      	movs	r2, #1
 8001590:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2201      	movs	r2, #1
 8001598:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2201      	movs	r2, #1
 80015a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2201      	movs	r2, #1
 80015a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2201      	movs	r2, #1
 80015b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80015b4:	2300      	movs	r3, #0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
	...

080015c0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d001      	beq.n	80015d8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e03c      	b.n	8001652 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2202      	movs	r2, #2
 80015dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a1d      	ldr	r2, [pc, #116]	; (800165c <HAL_TIM_Base_Start+0x9c>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d018      	beq.n	800161c <HAL_TIM_Base_Start+0x5c>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a1c      	ldr	r2, [pc, #112]	; (8001660 <HAL_TIM_Base_Start+0xa0>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d013      	beq.n	800161c <HAL_TIM_Base_Start+0x5c>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015fc:	d00e      	beq.n	800161c <HAL_TIM_Base_Start+0x5c>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a18      	ldr	r2, [pc, #96]	; (8001664 <HAL_TIM_Base_Start+0xa4>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d009      	beq.n	800161c <HAL_TIM_Base_Start+0x5c>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a16      	ldr	r2, [pc, #88]	; (8001668 <HAL_TIM_Base_Start+0xa8>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d004      	beq.n	800161c <HAL_TIM_Base_Start+0x5c>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a15      	ldr	r2, [pc, #84]	; (800166c <HAL_TIM_Base_Start+0xac>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d111      	bne.n	8001640 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	f003 0307 	and.w	r3, r3, #7
 8001626:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	2b06      	cmp	r3, #6
 800162c:	d010      	beq.n	8001650 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f042 0201 	orr.w	r2, r2, #1
 800163c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800163e:	e007      	b.n	8001650 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f042 0201 	orr.w	r2, r2, #1
 800164e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	3714      	adds	r7, #20
 8001656:	46bd      	mov	sp, r7
 8001658:	bc80      	pop	{r7}
 800165a:	4770      	bx	lr
 800165c:	40012c00 	.word	0x40012c00
 8001660:	40013400 	.word	0x40013400
 8001664:	40000400 	.word	0x40000400
 8001668:	40000800 	.word	0x40000800
 800166c:	40000c00 	.word	0x40000c00

08001670 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800167a:	2300      	movs	r3, #0
 800167c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001684:	2b01      	cmp	r3, #1
 8001686:	d101      	bne.n	800168c <HAL_TIM_ConfigClockSource+0x1c>
 8001688:	2302      	movs	r3, #2
 800168a:	e0b4      	b.n	80017f6 <HAL_TIM_ConfigClockSource+0x186>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2201      	movs	r2, #1
 8001690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2202      	movs	r2, #2
 8001698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80016aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80016b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	68ba      	ldr	r2, [r7, #8]
 80016ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016c4:	d03e      	beq.n	8001744 <HAL_TIM_ConfigClockSource+0xd4>
 80016c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016ca:	f200 8087 	bhi.w	80017dc <HAL_TIM_ConfigClockSource+0x16c>
 80016ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016d2:	f000 8086 	beq.w	80017e2 <HAL_TIM_ConfigClockSource+0x172>
 80016d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016da:	d87f      	bhi.n	80017dc <HAL_TIM_ConfigClockSource+0x16c>
 80016dc:	2b70      	cmp	r3, #112	; 0x70
 80016de:	d01a      	beq.n	8001716 <HAL_TIM_ConfigClockSource+0xa6>
 80016e0:	2b70      	cmp	r3, #112	; 0x70
 80016e2:	d87b      	bhi.n	80017dc <HAL_TIM_ConfigClockSource+0x16c>
 80016e4:	2b60      	cmp	r3, #96	; 0x60
 80016e6:	d050      	beq.n	800178a <HAL_TIM_ConfigClockSource+0x11a>
 80016e8:	2b60      	cmp	r3, #96	; 0x60
 80016ea:	d877      	bhi.n	80017dc <HAL_TIM_ConfigClockSource+0x16c>
 80016ec:	2b50      	cmp	r3, #80	; 0x50
 80016ee:	d03c      	beq.n	800176a <HAL_TIM_ConfigClockSource+0xfa>
 80016f0:	2b50      	cmp	r3, #80	; 0x50
 80016f2:	d873      	bhi.n	80017dc <HAL_TIM_ConfigClockSource+0x16c>
 80016f4:	2b40      	cmp	r3, #64	; 0x40
 80016f6:	d058      	beq.n	80017aa <HAL_TIM_ConfigClockSource+0x13a>
 80016f8:	2b40      	cmp	r3, #64	; 0x40
 80016fa:	d86f      	bhi.n	80017dc <HAL_TIM_ConfigClockSource+0x16c>
 80016fc:	2b30      	cmp	r3, #48	; 0x30
 80016fe:	d064      	beq.n	80017ca <HAL_TIM_ConfigClockSource+0x15a>
 8001700:	2b30      	cmp	r3, #48	; 0x30
 8001702:	d86b      	bhi.n	80017dc <HAL_TIM_ConfigClockSource+0x16c>
 8001704:	2b20      	cmp	r3, #32
 8001706:	d060      	beq.n	80017ca <HAL_TIM_ConfigClockSource+0x15a>
 8001708:	2b20      	cmp	r3, #32
 800170a:	d867      	bhi.n	80017dc <HAL_TIM_ConfigClockSource+0x16c>
 800170c:	2b00      	cmp	r3, #0
 800170e:	d05c      	beq.n	80017ca <HAL_TIM_ConfigClockSource+0x15a>
 8001710:	2b10      	cmp	r3, #16
 8001712:	d05a      	beq.n	80017ca <HAL_TIM_ConfigClockSource+0x15a>
 8001714:	e062      	b.n	80017dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001726:	f000 f95c 	bl	80019e2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001738:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	68ba      	ldr	r2, [r7, #8]
 8001740:	609a      	str	r2, [r3, #8]
      break;
 8001742:	e04f      	b.n	80017e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001754:	f000 f945 	bl	80019e2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	689a      	ldr	r2, [r3, #8]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001766:	609a      	str	r2, [r3, #8]
      break;
 8001768:	e03c      	b.n	80017e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001776:	461a      	mov	r2, r3
 8001778:	f000 f8bc 	bl	80018f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2150      	movs	r1, #80	; 0x50
 8001782:	4618      	mov	r0, r3
 8001784:	f000 f913 	bl	80019ae <TIM_ITRx_SetConfig>
      break;
 8001788:	e02c      	b.n	80017e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001796:	461a      	mov	r2, r3
 8001798:	f000 f8da 	bl	8001950 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2160      	movs	r1, #96	; 0x60
 80017a2:	4618      	mov	r0, r3
 80017a4:	f000 f903 	bl	80019ae <TIM_ITRx_SetConfig>
      break;
 80017a8:	e01c      	b.n	80017e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80017b6:	461a      	mov	r2, r3
 80017b8:	f000 f89c 	bl	80018f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2140      	movs	r1, #64	; 0x40
 80017c2:	4618      	mov	r0, r3
 80017c4:	f000 f8f3 	bl	80019ae <TIM_ITRx_SetConfig>
      break;
 80017c8:	e00c      	b.n	80017e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4619      	mov	r1, r3
 80017d4:	4610      	mov	r0, r2
 80017d6:	f000 f8ea 	bl	80019ae <TIM_ITRx_SetConfig>
      break;
 80017da:	e003      	b.n	80017e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	73fb      	strb	r3, [r7, #15]
      break;
 80017e0:	e000      	b.n	80017e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80017e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2201      	movs	r2, #1
 80017e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2200      	movs	r2, #0
 80017f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80017f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3710      	adds	r7, #16
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
	...

08001800 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001800:	b480      	push	{r7}
 8001802:	b085      	sub	sp, #20
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	4a33      	ldr	r2, [pc, #204]	; (80018e0 <TIM_Base_SetConfig+0xe0>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d013      	beq.n	8001840 <TIM_Base_SetConfig+0x40>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	4a32      	ldr	r2, [pc, #200]	; (80018e4 <TIM_Base_SetConfig+0xe4>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d00f      	beq.n	8001840 <TIM_Base_SetConfig+0x40>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001826:	d00b      	beq.n	8001840 <TIM_Base_SetConfig+0x40>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	4a2f      	ldr	r2, [pc, #188]	; (80018e8 <TIM_Base_SetConfig+0xe8>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d007      	beq.n	8001840 <TIM_Base_SetConfig+0x40>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	4a2e      	ldr	r2, [pc, #184]	; (80018ec <TIM_Base_SetConfig+0xec>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d003      	beq.n	8001840 <TIM_Base_SetConfig+0x40>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4a2d      	ldr	r2, [pc, #180]	; (80018f0 <TIM_Base_SetConfig+0xf0>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d108      	bne.n	8001852 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001846:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	68fa      	ldr	r2, [r7, #12]
 800184e:	4313      	orrs	r3, r2
 8001850:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4a22      	ldr	r2, [pc, #136]	; (80018e0 <TIM_Base_SetConfig+0xe0>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d013      	beq.n	8001882 <TIM_Base_SetConfig+0x82>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4a21      	ldr	r2, [pc, #132]	; (80018e4 <TIM_Base_SetConfig+0xe4>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d00f      	beq.n	8001882 <TIM_Base_SetConfig+0x82>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001868:	d00b      	beq.n	8001882 <TIM_Base_SetConfig+0x82>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a1e      	ldr	r2, [pc, #120]	; (80018e8 <TIM_Base_SetConfig+0xe8>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d007      	beq.n	8001882 <TIM_Base_SetConfig+0x82>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a1d      	ldr	r2, [pc, #116]	; (80018ec <TIM_Base_SetConfig+0xec>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d003      	beq.n	8001882 <TIM_Base_SetConfig+0x82>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a1c      	ldr	r2, [pc, #112]	; (80018f0 <TIM_Base_SetConfig+0xf0>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d108      	bne.n	8001894 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001888:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	68db      	ldr	r3, [r3, #12]
 800188e:	68fa      	ldr	r2, [r7, #12]
 8001890:	4313      	orrs	r3, r2
 8001892:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	695b      	ldr	r3, [r3, #20]
 800189e:	4313      	orrs	r3, r2
 80018a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	68fa      	ldr	r2, [r7, #12]
 80018a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	689a      	ldr	r2, [r3, #8]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	4a09      	ldr	r2, [pc, #36]	; (80018e0 <TIM_Base_SetConfig+0xe0>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d003      	beq.n	80018c8 <TIM_Base_SetConfig+0xc8>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	4a08      	ldr	r2, [pc, #32]	; (80018e4 <TIM_Base_SetConfig+0xe4>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d103      	bne.n	80018d0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	691a      	ldr	r2, [r3, #16]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2201      	movs	r2, #1
 80018d4:	615a      	str	r2, [r3, #20]
}
 80018d6:	bf00      	nop
 80018d8:	3714      	adds	r7, #20
 80018da:	46bd      	mov	sp, r7
 80018dc:	bc80      	pop	{r7}
 80018de:	4770      	bx	lr
 80018e0:	40012c00 	.word	0x40012c00
 80018e4:	40013400 	.word	0x40013400
 80018e8:	40000400 	.word	0x40000400
 80018ec:	40000800 	.word	0x40000800
 80018f0:	40000c00 	.word	0x40000c00

080018f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b087      	sub	sp, #28
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	6a1b      	ldr	r3, [r3, #32]
 8001904:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	6a1b      	ldr	r3, [r3, #32]
 800190a:	f023 0201 	bic.w	r2, r3, #1
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	699b      	ldr	r3, [r3, #24]
 8001916:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800191e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	011b      	lsls	r3, r3, #4
 8001924:	693a      	ldr	r2, [r7, #16]
 8001926:	4313      	orrs	r3, r2
 8001928:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	f023 030a 	bic.w	r3, r3, #10
 8001930:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001932:	697a      	ldr	r2, [r7, #20]
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	4313      	orrs	r3, r2
 8001938:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	693a      	ldr	r2, [r7, #16]
 800193e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	697a      	ldr	r2, [r7, #20]
 8001944:	621a      	str	r2, [r3, #32]
}
 8001946:	bf00      	nop
 8001948:	371c      	adds	r7, #28
 800194a:	46bd      	mov	sp, r7
 800194c:	bc80      	pop	{r7}
 800194e:	4770      	bx	lr

08001950 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001950:	b480      	push	{r7}
 8001952:	b087      	sub	sp, #28
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	6a1b      	ldr	r3, [r3, #32]
 8001960:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	6a1b      	ldr	r3, [r3, #32]
 8001966:	f023 0210 	bic.w	r2, r3, #16
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	699b      	ldr	r3, [r3, #24]
 8001972:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800197a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	031b      	lsls	r3, r3, #12
 8001980:	693a      	ldr	r2, [r7, #16]
 8001982:	4313      	orrs	r3, r2
 8001984:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800198c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	011b      	lsls	r3, r3, #4
 8001992:	697a      	ldr	r2, [r7, #20]
 8001994:	4313      	orrs	r3, r2
 8001996:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	697a      	ldr	r2, [r7, #20]
 80019a2:	621a      	str	r2, [r3, #32]
}
 80019a4:	bf00      	nop
 80019a6:	371c      	adds	r7, #28
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bc80      	pop	{r7}
 80019ac:	4770      	bx	lr

080019ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80019ae:	b480      	push	{r7}
 80019b0:	b085      	sub	sp, #20
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
 80019b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80019c6:	683a      	ldr	r2, [r7, #0]
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	f043 0307 	orr.w	r3, r3, #7
 80019d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	68fa      	ldr	r2, [r7, #12]
 80019d6:	609a      	str	r2, [r3, #8]
}
 80019d8:	bf00      	nop
 80019da:	3714      	adds	r7, #20
 80019dc:	46bd      	mov	sp, r7
 80019de:	bc80      	pop	{r7}
 80019e0:	4770      	bx	lr

080019e2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80019e2:	b480      	push	{r7}
 80019e4:	b087      	sub	sp, #28
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	60f8      	str	r0, [r7, #12]
 80019ea:	60b9      	str	r1, [r7, #8]
 80019ec:	607a      	str	r2, [r7, #4]
 80019ee:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80019fc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	021a      	lsls	r2, r3, #8
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	431a      	orrs	r2, r3
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	697a      	ldr	r2, [r7, #20]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	697a      	ldr	r2, [r7, #20]
 8001a14:	609a      	str	r2, [r3, #8]
}
 8001a16:	bf00      	nop
 8001a18:	371c      	adds	r7, #28
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bc80      	pop	{r7}
 8001a1e:	4770      	bx	lr

08001a20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d101      	bne.n	8001a38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001a34:	2302      	movs	r3, #2
 8001a36:	e050      	b.n	8001ada <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2202      	movs	r2, #2
 8001a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	68fa      	ldr	r2, [r7, #12]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	68fa      	ldr	r2, [r7, #12]
 8001a70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a1b      	ldr	r2, [pc, #108]	; (8001ae4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d018      	beq.n	8001aae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a19      	ldr	r2, [pc, #100]	; (8001ae8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d013      	beq.n	8001aae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a8e:	d00e      	beq.n	8001aae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a15      	ldr	r2, [pc, #84]	; (8001aec <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d009      	beq.n	8001aae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a14      	ldr	r2, [pc, #80]	; (8001af0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d004      	beq.n	8001aae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a12      	ldr	r2, [pc, #72]	; (8001af4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d10c      	bne.n	8001ac8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ab4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	68ba      	ldr	r2, [r7, #8]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	68ba      	ldr	r2, [r7, #8]
 8001ac6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2201      	movs	r2, #1
 8001acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3714      	adds	r7, #20
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bc80      	pop	{r7}
 8001ae2:	4770      	bx	lr
 8001ae4:	40012c00 	.word	0x40012c00
 8001ae8:	40013400 	.word	0x40013400
 8001aec:	40000400 	.word	0x40000400
 8001af0:	40000800 	.word	0x40000800
 8001af4:	40000c00 	.word	0x40000c00

08001af8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d101      	bne.n	8001b0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e042      	b.n	8001b90 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d106      	bne.n	8001b24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f7fe fd7e 	bl	8000620 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2224      	movs	r2, #36	; 0x24
 8001b28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	68da      	ldr	r2, [r3, #12]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f000 f91d 	bl	8001d7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	691a      	ldr	r2, [r3, #16]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001b50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	695a      	ldr	r2, [r3, #20]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001b60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	68da      	ldr	r2, [r3, #12]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2220      	movs	r2, #32
 8001b7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2220      	movs	r2, #32
 8001b84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001b8e:	2300      	movs	r3, #0
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3708      	adds	r7, #8
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b08a      	sub	sp, #40	; 0x28
 8001b9c:	af02      	add	r7, sp, #8
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	603b      	str	r3, [r7, #0]
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	2b20      	cmp	r3, #32
 8001bb6:	d16d      	bne.n	8001c94 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d002      	beq.n	8001bc4 <HAL_UART_Transmit+0x2c>
 8001bbe:	88fb      	ldrh	r3, [r7, #6]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d101      	bne.n	8001bc8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e066      	b.n	8001c96 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2221      	movs	r2, #33	; 0x21
 8001bd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001bd6:	f7fe fded 	bl	80007b4 <HAL_GetTick>
 8001bda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	88fa      	ldrh	r2, [r7, #6]
 8001be0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	88fa      	ldrh	r2, [r7, #6]
 8001be6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bf0:	d108      	bne.n	8001c04 <HAL_UART_Transmit+0x6c>
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	691b      	ldr	r3, [r3, #16]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d104      	bne.n	8001c04 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	61bb      	str	r3, [r7, #24]
 8001c02:	e003      	b.n	8001c0c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001c0c:	e02a      	b.n	8001c64 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	9300      	str	r3, [sp, #0]
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	2200      	movs	r2, #0
 8001c16:	2180      	movs	r1, #128	; 0x80
 8001c18:	68f8      	ldr	r0, [r7, #12]
 8001c1a:	f000 f840 	bl	8001c9e <UART_WaitOnFlagUntilTimeout>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e036      	b.n	8001c96 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d10b      	bne.n	8001c46 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	881b      	ldrh	r3, [r3, #0]
 8001c32:	461a      	mov	r2, r3
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c3c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001c3e:	69bb      	ldr	r3, [r7, #24]
 8001c40:	3302      	adds	r3, #2
 8001c42:	61bb      	str	r3, [r7, #24]
 8001c44:	e007      	b.n	8001c56 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	781a      	ldrb	r2, [r3, #0]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	3301      	adds	r3, #1
 8001c54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	3b01      	subs	r3, #1
 8001c5e:	b29a      	uxth	r2, r3
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d1cf      	bne.n	8001c0e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	9300      	str	r3, [sp, #0]
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	2200      	movs	r2, #0
 8001c76:	2140      	movs	r1, #64	; 0x40
 8001c78:	68f8      	ldr	r0, [r7, #12]
 8001c7a:	f000 f810 	bl	8001c9e <UART_WaitOnFlagUntilTimeout>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e006      	b.n	8001c96 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2220      	movs	r2, #32
 8001c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001c90:	2300      	movs	r3, #0
 8001c92:	e000      	b.n	8001c96 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001c94:	2302      	movs	r3, #2
  }
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3720      	adds	r7, #32
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b090      	sub	sp, #64	; 0x40
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	60f8      	str	r0, [r7, #12]
 8001ca6:	60b9      	str	r1, [r7, #8]
 8001ca8:	603b      	str	r3, [r7, #0]
 8001caa:	4613      	mov	r3, r2
 8001cac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001cae:	e050      	b.n	8001d52 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001cb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001cb6:	d04c      	beq.n	8001d52 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001cb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d007      	beq.n	8001cce <UART_WaitOnFlagUntilTimeout+0x30>
 8001cbe:	f7fe fd79 	bl	80007b4 <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d241      	bcs.n	8001d52 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	330c      	adds	r3, #12
 8001cd4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cd8:	e853 3f00 	ldrex	r3, [r3]
 8001cdc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	330c      	adds	r3, #12
 8001cec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001cee:	637a      	str	r2, [r7, #52]	; 0x34
 8001cf0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001cf2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001cf4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001cf6:	e841 2300 	strex	r3, r2, [r1]
 8001cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d1e5      	bne.n	8001cce <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	3314      	adds	r3, #20
 8001d08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	e853 3f00 	ldrex	r3, [r3]
 8001d10:	613b      	str	r3, [r7, #16]
   return(result);
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	f023 0301 	bic.w	r3, r3, #1
 8001d18:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	3314      	adds	r3, #20
 8001d20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001d22:	623a      	str	r2, [r7, #32]
 8001d24:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d26:	69f9      	ldr	r1, [r7, #28]
 8001d28:	6a3a      	ldr	r2, [r7, #32]
 8001d2a:	e841 2300 	strex	r3, r2, [r1]
 8001d2e:	61bb      	str	r3, [r7, #24]
   return(result);
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d1e5      	bne.n	8001d02 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2220      	movs	r2, #32
 8001d3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2220      	movs	r2, #32
 8001d42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e00f      	b.n	8001d72 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	68ba      	ldr	r2, [r7, #8]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	bf0c      	ite	eq
 8001d62:	2301      	moveq	r3, #1
 8001d64:	2300      	movne	r3, #0
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	461a      	mov	r2, r3
 8001d6a:	79fb      	ldrb	r3, [r7, #7]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d09f      	beq.n	8001cb0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3740      	adds	r7, #64	; 0x40
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
	...

08001d7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	68da      	ldr	r2, [r3, #12]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	430a      	orrs	r2, r1
 8001d98:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	689a      	ldr	r2, [r3, #8]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	431a      	orrs	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	695b      	ldr	r3, [r3, #20]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	68db      	ldr	r3, [r3, #12]
 8001db2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001db6:	f023 030c 	bic.w	r3, r3, #12
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	6812      	ldr	r2, [r2, #0]
 8001dbe:	68b9      	ldr	r1, [r7, #8]
 8001dc0:	430b      	orrs	r3, r1
 8001dc2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	695b      	ldr	r3, [r3, #20]
 8001dca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	699a      	ldr	r2, [r3, #24]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a2c      	ldr	r2, [pc, #176]	; (8001e90 <UART_SetConfig+0x114>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d103      	bne.n	8001dec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001de4:	f7ff fb6a 	bl	80014bc <HAL_RCC_GetPCLK2Freq>
 8001de8:	60f8      	str	r0, [r7, #12]
 8001dea:	e002      	b.n	8001df2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001dec:	f7ff fb52 	bl	8001494 <HAL_RCC_GetPCLK1Freq>
 8001df0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001df2:	68fa      	ldr	r2, [r7, #12]
 8001df4:	4613      	mov	r3, r2
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	4413      	add	r3, r2
 8001dfa:	009a      	lsls	r2, r3, #2
 8001dfc:	441a      	add	r2, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e08:	4a22      	ldr	r2, [pc, #136]	; (8001e94 <UART_SetConfig+0x118>)
 8001e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e0e:	095b      	lsrs	r3, r3, #5
 8001e10:	0119      	lsls	r1, r3, #4
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	4613      	mov	r3, r2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	4413      	add	r3, r2
 8001e1a:	009a      	lsls	r2, r3, #2
 8001e1c:	441a      	add	r2, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e28:	4b1a      	ldr	r3, [pc, #104]	; (8001e94 <UART_SetConfig+0x118>)
 8001e2a:	fba3 0302 	umull	r0, r3, r3, r2
 8001e2e:	095b      	lsrs	r3, r3, #5
 8001e30:	2064      	movs	r0, #100	; 0x64
 8001e32:	fb00 f303 	mul.w	r3, r0, r3
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	011b      	lsls	r3, r3, #4
 8001e3a:	3332      	adds	r3, #50	; 0x32
 8001e3c:	4a15      	ldr	r2, [pc, #84]	; (8001e94 <UART_SetConfig+0x118>)
 8001e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e42:	095b      	lsrs	r3, r3, #5
 8001e44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e48:	4419      	add	r1, r3
 8001e4a:	68fa      	ldr	r2, [r7, #12]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	4413      	add	r3, r2
 8001e52:	009a      	lsls	r2, r3, #2
 8001e54:	441a      	add	r2, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e60:	4b0c      	ldr	r3, [pc, #48]	; (8001e94 <UART_SetConfig+0x118>)
 8001e62:	fba3 0302 	umull	r0, r3, r3, r2
 8001e66:	095b      	lsrs	r3, r3, #5
 8001e68:	2064      	movs	r0, #100	; 0x64
 8001e6a:	fb00 f303 	mul.w	r3, r0, r3
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	011b      	lsls	r3, r3, #4
 8001e72:	3332      	adds	r3, #50	; 0x32
 8001e74:	4a07      	ldr	r2, [pc, #28]	; (8001e94 <UART_SetConfig+0x118>)
 8001e76:	fba2 2303 	umull	r2, r3, r2, r3
 8001e7a:	095b      	lsrs	r3, r3, #5
 8001e7c:	f003 020f 	and.w	r2, r3, #15
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	440a      	add	r2, r1
 8001e86:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001e88:	bf00      	nop
 8001e8a:	3710      	adds	r7, #16
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	40013800 	.word	0x40013800
 8001e94:	51eb851f 	.word	0x51eb851f

08001e98 <siprintf>:
 8001e98:	b40e      	push	{r1, r2, r3}
 8001e9a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001e9e:	b500      	push	{lr}
 8001ea0:	b09c      	sub	sp, #112	; 0x70
 8001ea2:	ab1d      	add	r3, sp, #116	; 0x74
 8001ea4:	9002      	str	r0, [sp, #8]
 8001ea6:	9006      	str	r0, [sp, #24]
 8001ea8:	9107      	str	r1, [sp, #28]
 8001eaa:	9104      	str	r1, [sp, #16]
 8001eac:	4808      	ldr	r0, [pc, #32]	; (8001ed0 <siprintf+0x38>)
 8001eae:	4909      	ldr	r1, [pc, #36]	; (8001ed4 <siprintf+0x3c>)
 8001eb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8001eb4:	9105      	str	r1, [sp, #20]
 8001eb6:	6800      	ldr	r0, [r0, #0]
 8001eb8:	a902      	add	r1, sp, #8
 8001eba:	9301      	str	r3, [sp, #4]
 8001ebc:	f000 f89a 	bl	8001ff4 <_svfiprintf_r>
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	9b02      	ldr	r3, [sp, #8]
 8001ec4:	701a      	strb	r2, [r3, #0]
 8001ec6:	b01c      	add	sp, #112	; 0x70
 8001ec8:	f85d eb04 	ldr.w	lr, [sp], #4
 8001ecc:	b003      	add	sp, #12
 8001ece:	4770      	bx	lr
 8001ed0:	20000058 	.word	0x20000058
 8001ed4:	ffff0208 	.word	0xffff0208

08001ed8 <memset>:
 8001ed8:	4603      	mov	r3, r0
 8001eda:	4402      	add	r2, r0
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d100      	bne.n	8001ee2 <memset+0xa>
 8001ee0:	4770      	bx	lr
 8001ee2:	f803 1b01 	strb.w	r1, [r3], #1
 8001ee6:	e7f9      	b.n	8001edc <memset+0x4>

08001ee8 <__errno>:
 8001ee8:	4b01      	ldr	r3, [pc, #4]	; (8001ef0 <__errno+0x8>)
 8001eea:	6818      	ldr	r0, [r3, #0]
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	20000058 	.word	0x20000058

08001ef4 <__libc_init_array>:
 8001ef4:	b570      	push	{r4, r5, r6, lr}
 8001ef6:	2600      	movs	r6, #0
 8001ef8:	4d0c      	ldr	r5, [pc, #48]	; (8001f2c <__libc_init_array+0x38>)
 8001efa:	4c0d      	ldr	r4, [pc, #52]	; (8001f30 <__libc_init_array+0x3c>)
 8001efc:	1b64      	subs	r4, r4, r5
 8001efe:	10a4      	asrs	r4, r4, #2
 8001f00:	42a6      	cmp	r6, r4
 8001f02:	d109      	bne.n	8001f18 <__libc_init_array+0x24>
 8001f04:	f000 fc7a 	bl	80027fc <_init>
 8001f08:	2600      	movs	r6, #0
 8001f0a:	4d0a      	ldr	r5, [pc, #40]	; (8001f34 <__libc_init_array+0x40>)
 8001f0c:	4c0a      	ldr	r4, [pc, #40]	; (8001f38 <__libc_init_array+0x44>)
 8001f0e:	1b64      	subs	r4, r4, r5
 8001f10:	10a4      	asrs	r4, r4, #2
 8001f12:	42a6      	cmp	r6, r4
 8001f14:	d105      	bne.n	8001f22 <__libc_init_array+0x2e>
 8001f16:	bd70      	pop	{r4, r5, r6, pc}
 8001f18:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f1c:	4798      	blx	r3
 8001f1e:	3601      	adds	r6, #1
 8001f20:	e7ee      	b.n	8001f00 <__libc_init_array+0xc>
 8001f22:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f26:	4798      	blx	r3
 8001f28:	3601      	adds	r6, #1
 8001f2a:	e7f2      	b.n	8001f12 <__libc_init_array+0x1e>
 8001f2c:	08002888 	.word	0x08002888
 8001f30:	08002888 	.word	0x08002888
 8001f34:	08002888 	.word	0x08002888
 8001f38:	0800288c 	.word	0x0800288c

08001f3c <__retarget_lock_acquire_recursive>:
 8001f3c:	4770      	bx	lr

08001f3e <__retarget_lock_release_recursive>:
 8001f3e:	4770      	bx	lr

08001f40 <__ssputs_r>:
 8001f40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f44:	461f      	mov	r7, r3
 8001f46:	688e      	ldr	r6, [r1, #8]
 8001f48:	4682      	mov	sl, r0
 8001f4a:	42be      	cmp	r6, r7
 8001f4c:	460c      	mov	r4, r1
 8001f4e:	4690      	mov	r8, r2
 8001f50:	680b      	ldr	r3, [r1, #0]
 8001f52:	d82c      	bhi.n	8001fae <__ssputs_r+0x6e>
 8001f54:	898a      	ldrh	r2, [r1, #12]
 8001f56:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001f5a:	d026      	beq.n	8001faa <__ssputs_r+0x6a>
 8001f5c:	6965      	ldr	r5, [r4, #20]
 8001f5e:	6909      	ldr	r1, [r1, #16]
 8001f60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001f64:	eba3 0901 	sub.w	r9, r3, r1
 8001f68:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001f6c:	1c7b      	adds	r3, r7, #1
 8001f6e:	444b      	add	r3, r9
 8001f70:	106d      	asrs	r5, r5, #1
 8001f72:	429d      	cmp	r5, r3
 8001f74:	bf38      	it	cc
 8001f76:	461d      	movcc	r5, r3
 8001f78:	0553      	lsls	r3, r2, #21
 8001f7a:	d527      	bpl.n	8001fcc <__ssputs_r+0x8c>
 8001f7c:	4629      	mov	r1, r5
 8001f7e:	f000 f957 	bl	8002230 <_malloc_r>
 8001f82:	4606      	mov	r6, r0
 8001f84:	b360      	cbz	r0, 8001fe0 <__ssputs_r+0xa0>
 8001f86:	464a      	mov	r2, r9
 8001f88:	6921      	ldr	r1, [r4, #16]
 8001f8a:	f000 fbd9 	bl	8002740 <memcpy>
 8001f8e:	89a3      	ldrh	r3, [r4, #12]
 8001f90:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001f94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f98:	81a3      	strh	r3, [r4, #12]
 8001f9a:	6126      	str	r6, [r4, #16]
 8001f9c:	444e      	add	r6, r9
 8001f9e:	6026      	str	r6, [r4, #0]
 8001fa0:	463e      	mov	r6, r7
 8001fa2:	6165      	str	r5, [r4, #20]
 8001fa4:	eba5 0509 	sub.w	r5, r5, r9
 8001fa8:	60a5      	str	r5, [r4, #8]
 8001faa:	42be      	cmp	r6, r7
 8001fac:	d900      	bls.n	8001fb0 <__ssputs_r+0x70>
 8001fae:	463e      	mov	r6, r7
 8001fb0:	4632      	mov	r2, r6
 8001fb2:	4641      	mov	r1, r8
 8001fb4:	6820      	ldr	r0, [r4, #0]
 8001fb6:	f000 fb8a 	bl	80026ce <memmove>
 8001fba:	2000      	movs	r0, #0
 8001fbc:	68a3      	ldr	r3, [r4, #8]
 8001fbe:	1b9b      	subs	r3, r3, r6
 8001fc0:	60a3      	str	r3, [r4, #8]
 8001fc2:	6823      	ldr	r3, [r4, #0]
 8001fc4:	4433      	add	r3, r6
 8001fc6:	6023      	str	r3, [r4, #0]
 8001fc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001fcc:	462a      	mov	r2, r5
 8001fce:	f000 fb4f 	bl	8002670 <_realloc_r>
 8001fd2:	4606      	mov	r6, r0
 8001fd4:	2800      	cmp	r0, #0
 8001fd6:	d1e0      	bne.n	8001f9a <__ssputs_r+0x5a>
 8001fd8:	4650      	mov	r0, sl
 8001fda:	6921      	ldr	r1, [r4, #16]
 8001fdc:	f000 fbbe 	bl	800275c <_free_r>
 8001fe0:	230c      	movs	r3, #12
 8001fe2:	f8ca 3000 	str.w	r3, [sl]
 8001fe6:	89a3      	ldrh	r3, [r4, #12]
 8001fe8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001fec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ff0:	81a3      	strh	r3, [r4, #12]
 8001ff2:	e7e9      	b.n	8001fc8 <__ssputs_r+0x88>

08001ff4 <_svfiprintf_r>:
 8001ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ff8:	4698      	mov	r8, r3
 8001ffa:	898b      	ldrh	r3, [r1, #12]
 8001ffc:	4607      	mov	r7, r0
 8001ffe:	061b      	lsls	r3, r3, #24
 8002000:	460d      	mov	r5, r1
 8002002:	4614      	mov	r4, r2
 8002004:	b09d      	sub	sp, #116	; 0x74
 8002006:	d50e      	bpl.n	8002026 <_svfiprintf_r+0x32>
 8002008:	690b      	ldr	r3, [r1, #16]
 800200a:	b963      	cbnz	r3, 8002026 <_svfiprintf_r+0x32>
 800200c:	2140      	movs	r1, #64	; 0x40
 800200e:	f000 f90f 	bl	8002230 <_malloc_r>
 8002012:	6028      	str	r0, [r5, #0]
 8002014:	6128      	str	r0, [r5, #16]
 8002016:	b920      	cbnz	r0, 8002022 <_svfiprintf_r+0x2e>
 8002018:	230c      	movs	r3, #12
 800201a:	603b      	str	r3, [r7, #0]
 800201c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002020:	e0d0      	b.n	80021c4 <_svfiprintf_r+0x1d0>
 8002022:	2340      	movs	r3, #64	; 0x40
 8002024:	616b      	str	r3, [r5, #20]
 8002026:	2300      	movs	r3, #0
 8002028:	9309      	str	r3, [sp, #36]	; 0x24
 800202a:	2320      	movs	r3, #32
 800202c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002030:	2330      	movs	r3, #48	; 0x30
 8002032:	f04f 0901 	mov.w	r9, #1
 8002036:	f8cd 800c 	str.w	r8, [sp, #12]
 800203a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80021dc <_svfiprintf_r+0x1e8>
 800203e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002042:	4623      	mov	r3, r4
 8002044:	469a      	mov	sl, r3
 8002046:	f813 2b01 	ldrb.w	r2, [r3], #1
 800204a:	b10a      	cbz	r2, 8002050 <_svfiprintf_r+0x5c>
 800204c:	2a25      	cmp	r2, #37	; 0x25
 800204e:	d1f9      	bne.n	8002044 <_svfiprintf_r+0x50>
 8002050:	ebba 0b04 	subs.w	fp, sl, r4
 8002054:	d00b      	beq.n	800206e <_svfiprintf_r+0x7a>
 8002056:	465b      	mov	r3, fp
 8002058:	4622      	mov	r2, r4
 800205a:	4629      	mov	r1, r5
 800205c:	4638      	mov	r0, r7
 800205e:	f7ff ff6f 	bl	8001f40 <__ssputs_r>
 8002062:	3001      	adds	r0, #1
 8002064:	f000 80a9 	beq.w	80021ba <_svfiprintf_r+0x1c6>
 8002068:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800206a:	445a      	add	r2, fp
 800206c:	9209      	str	r2, [sp, #36]	; 0x24
 800206e:	f89a 3000 	ldrb.w	r3, [sl]
 8002072:	2b00      	cmp	r3, #0
 8002074:	f000 80a1 	beq.w	80021ba <_svfiprintf_r+0x1c6>
 8002078:	2300      	movs	r3, #0
 800207a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800207e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002082:	f10a 0a01 	add.w	sl, sl, #1
 8002086:	9304      	str	r3, [sp, #16]
 8002088:	9307      	str	r3, [sp, #28]
 800208a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800208e:	931a      	str	r3, [sp, #104]	; 0x68
 8002090:	4654      	mov	r4, sl
 8002092:	2205      	movs	r2, #5
 8002094:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002098:	4850      	ldr	r0, [pc, #320]	; (80021dc <_svfiprintf_r+0x1e8>)
 800209a:	f000 fb43 	bl	8002724 <memchr>
 800209e:	9a04      	ldr	r2, [sp, #16]
 80020a0:	b9d8      	cbnz	r0, 80020da <_svfiprintf_r+0xe6>
 80020a2:	06d0      	lsls	r0, r2, #27
 80020a4:	bf44      	itt	mi
 80020a6:	2320      	movmi	r3, #32
 80020a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80020ac:	0711      	lsls	r1, r2, #28
 80020ae:	bf44      	itt	mi
 80020b0:	232b      	movmi	r3, #43	; 0x2b
 80020b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80020b6:	f89a 3000 	ldrb.w	r3, [sl]
 80020ba:	2b2a      	cmp	r3, #42	; 0x2a
 80020bc:	d015      	beq.n	80020ea <_svfiprintf_r+0xf6>
 80020be:	4654      	mov	r4, sl
 80020c0:	2000      	movs	r0, #0
 80020c2:	f04f 0c0a 	mov.w	ip, #10
 80020c6:	9a07      	ldr	r2, [sp, #28]
 80020c8:	4621      	mov	r1, r4
 80020ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80020ce:	3b30      	subs	r3, #48	; 0x30
 80020d0:	2b09      	cmp	r3, #9
 80020d2:	d94d      	bls.n	8002170 <_svfiprintf_r+0x17c>
 80020d4:	b1b0      	cbz	r0, 8002104 <_svfiprintf_r+0x110>
 80020d6:	9207      	str	r2, [sp, #28]
 80020d8:	e014      	b.n	8002104 <_svfiprintf_r+0x110>
 80020da:	eba0 0308 	sub.w	r3, r0, r8
 80020de:	fa09 f303 	lsl.w	r3, r9, r3
 80020e2:	4313      	orrs	r3, r2
 80020e4:	46a2      	mov	sl, r4
 80020e6:	9304      	str	r3, [sp, #16]
 80020e8:	e7d2      	b.n	8002090 <_svfiprintf_r+0x9c>
 80020ea:	9b03      	ldr	r3, [sp, #12]
 80020ec:	1d19      	adds	r1, r3, #4
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	9103      	str	r1, [sp, #12]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	bfbb      	ittet	lt
 80020f6:	425b      	neglt	r3, r3
 80020f8:	f042 0202 	orrlt.w	r2, r2, #2
 80020fc:	9307      	strge	r3, [sp, #28]
 80020fe:	9307      	strlt	r3, [sp, #28]
 8002100:	bfb8      	it	lt
 8002102:	9204      	strlt	r2, [sp, #16]
 8002104:	7823      	ldrb	r3, [r4, #0]
 8002106:	2b2e      	cmp	r3, #46	; 0x2e
 8002108:	d10c      	bne.n	8002124 <_svfiprintf_r+0x130>
 800210a:	7863      	ldrb	r3, [r4, #1]
 800210c:	2b2a      	cmp	r3, #42	; 0x2a
 800210e:	d134      	bne.n	800217a <_svfiprintf_r+0x186>
 8002110:	9b03      	ldr	r3, [sp, #12]
 8002112:	3402      	adds	r4, #2
 8002114:	1d1a      	adds	r2, r3, #4
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	9203      	str	r2, [sp, #12]
 800211a:	2b00      	cmp	r3, #0
 800211c:	bfb8      	it	lt
 800211e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002122:	9305      	str	r3, [sp, #20]
 8002124:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80021e0 <_svfiprintf_r+0x1ec>
 8002128:	2203      	movs	r2, #3
 800212a:	4650      	mov	r0, sl
 800212c:	7821      	ldrb	r1, [r4, #0]
 800212e:	f000 faf9 	bl	8002724 <memchr>
 8002132:	b138      	cbz	r0, 8002144 <_svfiprintf_r+0x150>
 8002134:	2240      	movs	r2, #64	; 0x40
 8002136:	9b04      	ldr	r3, [sp, #16]
 8002138:	eba0 000a 	sub.w	r0, r0, sl
 800213c:	4082      	lsls	r2, r0
 800213e:	4313      	orrs	r3, r2
 8002140:	3401      	adds	r4, #1
 8002142:	9304      	str	r3, [sp, #16]
 8002144:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002148:	2206      	movs	r2, #6
 800214a:	4826      	ldr	r0, [pc, #152]	; (80021e4 <_svfiprintf_r+0x1f0>)
 800214c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002150:	f000 fae8 	bl	8002724 <memchr>
 8002154:	2800      	cmp	r0, #0
 8002156:	d038      	beq.n	80021ca <_svfiprintf_r+0x1d6>
 8002158:	4b23      	ldr	r3, [pc, #140]	; (80021e8 <_svfiprintf_r+0x1f4>)
 800215a:	bb1b      	cbnz	r3, 80021a4 <_svfiprintf_r+0x1b0>
 800215c:	9b03      	ldr	r3, [sp, #12]
 800215e:	3307      	adds	r3, #7
 8002160:	f023 0307 	bic.w	r3, r3, #7
 8002164:	3308      	adds	r3, #8
 8002166:	9303      	str	r3, [sp, #12]
 8002168:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800216a:	4433      	add	r3, r6
 800216c:	9309      	str	r3, [sp, #36]	; 0x24
 800216e:	e768      	b.n	8002042 <_svfiprintf_r+0x4e>
 8002170:	460c      	mov	r4, r1
 8002172:	2001      	movs	r0, #1
 8002174:	fb0c 3202 	mla	r2, ip, r2, r3
 8002178:	e7a6      	b.n	80020c8 <_svfiprintf_r+0xd4>
 800217a:	2300      	movs	r3, #0
 800217c:	f04f 0c0a 	mov.w	ip, #10
 8002180:	4619      	mov	r1, r3
 8002182:	3401      	adds	r4, #1
 8002184:	9305      	str	r3, [sp, #20]
 8002186:	4620      	mov	r0, r4
 8002188:	f810 2b01 	ldrb.w	r2, [r0], #1
 800218c:	3a30      	subs	r2, #48	; 0x30
 800218e:	2a09      	cmp	r2, #9
 8002190:	d903      	bls.n	800219a <_svfiprintf_r+0x1a6>
 8002192:	2b00      	cmp	r3, #0
 8002194:	d0c6      	beq.n	8002124 <_svfiprintf_r+0x130>
 8002196:	9105      	str	r1, [sp, #20]
 8002198:	e7c4      	b.n	8002124 <_svfiprintf_r+0x130>
 800219a:	4604      	mov	r4, r0
 800219c:	2301      	movs	r3, #1
 800219e:	fb0c 2101 	mla	r1, ip, r1, r2
 80021a2:	e7f0      	b.n	8002186 <_svfiprintf_r+0x192>
 80021a4:	ab03      	add	r3, sp, #12
 80021a6:	9300      	str	r3, [sp, #0]
 80021a8:	462a      	mov	r2, r5
 80021aa:	4638      	mov	r0, r7
 80021ac:	4b0f      	ldr	r3, [pc, #60]	; (80021ec <_svfiprintf_r+0x1f8>)
 80021ae:	a904      	add	r1, sp, #16
 80021b0:	f3af 8000 	nop.w
 80021b4:	1c42      	adds	r2, r0, #1
 80021b6:	4606      	mov	r6, r0
 80021b8:	d1d6      	bne.n	8002168 <_svfiprintf_r+0x174>
 80021ba:	89ab      	ldrh	r3, [r5, #12]
 80021bc:	065b      	lsls	r3, r3, #25
 80021be:	f53f af2d 	bmi.w	800201c <_svfiprintf_r+0x28>
 80021c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80021c4:	b01d      	add	sp, #116	; 0x74
 80021c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021ca:	ab03      	add	r3, sp, #12
 80021cc:	9300      	str	r3, [sp, #0]
 80021ce:	462a      	mov	r2, r5
 80021d0:	4638      	mov	r0, r7
 80021d2:	4b06      	ldr	r3, [pc, #24]	; (80021ec <_svfiprintf_r+0x1f8>)
 80021d4:	a904      	add	r1, sp, #16
 80021d6:	f000 f91d 	bl	8002414 <_printf_i>
 80021da:	e7eb      	b.n	80021b4 <_svfiprintf_r+0x1c0>
 80021dc:	08002852 	.word	0x08002852
 80021e0:	08002858 	.word	0x08002858
 80021e4:	0800285c 	.word	0x0800285c
 80021e8:	00000000 	.word	0x00000000
 80021ec:	08001f41 	.word	0x08001f41

080021f0 <sbrk_aligned>:
 80021f0:	b570      	push	{r4, r5, r6, lr}
 80021f2:	4e0e      	ldr	r6, [pc, #56]	; (800222c <sbrk_aligned+0x3c>)
 80021f4:	460c      	mov	r4, r1
 80021f6:	6831      	ldr	r1, [r6, #0]
 80021f8:	4605      	mov	r5, r0
 80021fa:	b911      	cbnz	r1, 8002202 <sbrk_aligned+0x12>
 80021fc:	f000 fa82 	bl	8002704 <_sbrk_r>
 8002200:	6030      	str	r0, [r6, #0]
 8002202:	4621      	mov	r1, r4
 8002204:	4628      	mov	r0, r5
 8002206:	f000 fa7d 	bl	8002704 <_sbrk_r>
 800220a:	1c43      	adds	r3, r0, #1
 800220c:	d00a      	beq.n	8002224 <sbrk_aligned+0x34>
 800220e:	1cc4      	adds	r4, r0, #3
 8002210:	f024 0403 	bic.w	r4, r4, #3
 8002214:	42a0      	cmp	r0, r4
 8002216:	d007      	beq.n	8002228 <sbrk_aligned+0x38>
 8002218:	1a21      	subs	r1, r4, r0
 800221a:	4628      	mov	r0, r5
 800221c:	f000 fa72 	bl	8002704 <_sbrk_r>
 8002220:	3001      	adds	r0, #1
 8002222:	d101      	bne.n	8002228 <sbrk_aligned+0x38>
 8002224:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002228:	4620      	mov	r0, r4
 800222a:	bd70      	pop	{r4, r5, r6, pc}
 800222c:	20000250 	.word	0x20000250

08002230 <_malloc_r>:
 8002230:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002234:	1ccd      	adds	r5, r1, #3
 8002236:	f025 0503 	bic.w	r5, r5, #3
 800223a:	3508      	adds	r5, #8
 800223c:	2d0c      	cmp	r5, #12
 800223e:	bf38      	it	cc
 8002240:	250c      	movcc	r5, #12
 8002242:	2d00      	cmp	r5, #0
 8002244:	4607      	mov	r7, r0
 8002246:	db01      	blt.n	800224c <_malloc_r+0x1c>
 8002248:	42a9      	cmp	r1, r5
 800224a:	d905      	bls.n	8002258 <_malloc_r+0x28>
 800224c:	230c      	movs	r3, #12
 800224e:	2600      	movs	r6, #0
 8002250:	603b      	str	r3, [r7, #0]
 8002252:	4630      	mov	r0, r6
 8002254:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002258:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800232c <_malloc_r+0xfc>
 800225c:	f000 f9fc 	bl	8002658 <__malloc_lock>
 8002260:	f8d8 3000 	ldr.w	r3, [r8]
 8002264:	461c      	mov	r4, r3
 8002266:	bb5c      	cbnz	r4, 80022c0 <_malloc_r+0x90>
 8002268:	4629      	mov	r1, r5
 800226a:	4638      	mov	r0, r7
 800226c:	f7ff ffc0 	bl	80021f0 <sbrk_aligned>
 8002270:	1c43      	adds	r3, r0, #1
 8002272:	4604      	mov	r4, r0
 8002274:	d155      	bne.n	8002322 <_malloc_r+0xf2>
 8002276:	f8d8 4000 	ldr.w	r4, [r8]
 800227a:	4626      	mov	r6, r4
 800227c:	2e00      	cmp	r6, #0
 800227e:	d145      	bne.n	800230c <_malloc_r+0xdc>
 8002280:	2c00      	cmp	r4, #0
 8002282:	d048      	beq.n	8002316 <_malloc_r+0xe6>
 8002284:	6823      	ldr	r3, [r4, #0]
 8002286:	4631      	mov	r1, r6
 8002288:	4638      	mov	r0, r7
 800228a:	eb04 0903 	add.w	r9, r4, r3
 800228e:	f000 fa39 	bl	8002704 <_sbrk_r>
 8002292:	4581      	cmp	r9, r0
 8002294:	d13f      	bne.n	8002316 <_malloc_r+0xe6>
 8002296:	6821      	ldr	r1, [r4, #0]
 8002298:	4638      	mov	r0, r7
 800229a:	1a6d      	subs	r5, r5, r1
 800229c:	4629      	mov	r1, r5
 800229e:	f7ff ffa7 	bl	80021f0 <sbrk_aligned>
 80022a2:	3001      	adds	r0, #1
 80022a4:	d037      	beq.n	8002316 <_malloc_r+0xe6>
 80022a6:	6823      	ldr	r3, [r4, #0]
 80022a8:	442b      	add	r3, r5
 80022aa:	6023      	str	r3, [r4, #0]
 80022ac:	f8d8 3000 	ldr.w	r3, [r8]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d038      	beq.n	8002326 <_malloc_r+0xf6>
 80022b4:	685a      	ldr	r2, [r3, #4]
 80022b6:	42a2      	cmp	r2, r4
 80022b8:	d12b      	bne.n	8002312 <_malloc_r+0xe2>
 80022ba:	2200      	movs	r2, #0
 80022bc:	605a      	str	r2, [r3, #4]
 80022be:	e00f      	b.n	80022e0 <_malloc_r+0xb0>
 80022c0:	6822      	ldr	r2, [r4, #0]
 80022c2:	1b52      	subs	r2, r2, r5
 80022c4:	d41f      	bmi.n	8002306 <_malloc_r+0xd6>
 80022c6:	2a0b      	cmp	r2, #11
 80022c8:	d917      	bls.n	80022fa <_malloc_r+0xca>
 80022ca:	1961      	adds	r1, r4, r5
 80022cc:	42a3      	cmp	r3, r4
 80022ce:	6025      	str	r5, [r4, #0]
 80022d0:	bf18      	it	ne
 80022d2:	6059      	strne	r1, [r3, #4]
 80022d4:	6863      	ldr	r3, [r4, #4]
 80022d6:	bf08      	it	eq
 80022d8:	f8c8 1000 	streq.w	r1, [r8]
 80022dc:	5162      	str	r2, [r4, r5]
 80022de:	604b      	str	r3, [r1, #4]
 80022e0:	4638      	mov	r0, r7
 80022e2:	f104 060b 	add.w	r6, r4, #11
 80022e6:	f000 f9bd 	bl	8002664 <__malloc_unlock>
 80022ea:	f026 0607 	bic.w	r6, r6, #7
 80022ee:	1d23      	adds	r3, r4, #4
 80022f0:	1af2      	subs	r2, r6, r3
 80022f2:	d0ae      	beq.n	8002252 <_malloc_r+0x22>
 80022f4:	1b9b      	subs	r3, r3, r6
 80022f6:	50a3      	str	r3, [r4, r2]
 80022f8:	e7ab      	b.n	8002252 <_malloc_r+0x22>
 80022fa:	42a3      	cmp	r3, r4
 80022fc:	6862      	ldr	r2, [r4, #4]
 80022fe:	d1dd      	bne.n	80022bc <_malloc_r+0x8c>
 8002300:	f8c8 2000 	str.w	r2, [r8]
 8002304:	e7ec      	b.n	80022e0 <_malloc_r+0xb0>
 8002306:	4623      	mov	r3, r4
 8002308:	6864      	ldr	r4, [r4, #4]
 800230a:	e7ac      	b.n	8002266 <_malloc_r+0x36>
 800230c:	4634      	mov	r4, r6
 800230e:	6876      	ldr	r6, [r6, #4]
 8002310:	e7b4      	b.n	800227c <_malloc_r+0x4c>
 8002312:	4613      	mov	r3, r2
 8002314:	e7cc      	b.n	80022b0 <_malloc_r+0x80>
 8002316:	230c      	movs	r3, #12
 8002318:	4638      	mov	r0, r7
 800231a:	603b      	str	r3, [r7, #0]
 800231c:	f000 f9a2 	bl	8002664 <__malloc_unlock>
 8002320:	e797      	b.n	8002252 <_malloc_r+0x22>
 8002322:	6025      	str	r5, [r4, #0]
 8002324:	e7dc      	b.n	80022e0 <_malloc_r+0xb0>
 8002326:	605b      	str	r3, [r3, #4]
 8002328:	deff      	udf	#255	; 0xff
 800232a:	bf00      	nop
 800232c:	2000024c 	.word	0x2000024c

08002330 <_printf_common>:
 8002330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002334:	4616      	mov	r6, r2
 8002336:	4699      	mov	r9, r3
 8002338:	688a      	ldr	r2, [r1, #8]
 800233a:	690b      	ldr	r3, [r1, #16]
 800233c:	4607      	mov	r7, r0
 800233e:	4293      	cmp	r3, r2
 8002340:	bfb8      	it	lt
 8002342:	4613      	movlt	r3, r2
 8002344:	6033      	str	r3, [r6, #0]
 8002346:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800234a:	460c      	mov	r4, r1
 800234c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002350:	b10a      	cbz	r2, 8002356 <_printf_common+0x26>
 8002352:	3301      	adds	r3, #1
 8002354:	6033      	str	r3, [r6, #0]
 8002356:	6823      	ldr	r3, [r4, #0]
 8002358:	0699      	lsls	r1, r3, #26
 800235a:	bf42      	ittt	mi
 800235c:	6833      	ldrmi	r3, [r6, #0]
 800235e:	3302      	addmi	r3, #2
 8002360:	6033      	strmi	r3, [r6, #0]
 8002362:	6825      	ldr	r5, [r4, #0]
 8002364:	f015 0506 	ands.w	r5, r5, #6
 8002368:	d106      	bne.n	8002378 <_printf_common+0x48>
 800236a:	f104 0a19 	add.w	sl, r4, #25
 800236e:	68e3      	ldr	r3, [r4, #12]
 8002370:	6832      	ldr	r2, [r6, #0]
 8002372:	1a9b      	subs	r3, r3, r2
 8002374:	42ab      	cmp	r3, r5
 8002376:	dc2b      	bgt.n	80023d0 <_printf_common+0xa0>
 8002378:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800237c:	1e13      	subs	r3, r2, #0
 800237e:	6822      	ldr	r2, [r4, #0]
 8002380:	bf18      	it	ne
 8002382:	2301      	movne	r3, #1
 8002384:	0692      	lsls	r2, r2, #26
 8002386:	d430      	bmi.n	80023ea <_printf_common+0xba>
 8002388:	4649      	mov	r1, r9
 800238a:	4638      	mov	r0, r7
 800238c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002390:	47c0      	blx	r8
 8002392:	3001      	adds	r0, #1
 8002394:	d023      	beq.n	80023de <_printf_common+0xae>
 8002396:	6823      	ldr	r3, [r4, #0]
 8002398:	6922      	ldr	r2, [r4, #16]
 800239a:	f003 0306 	and.w	r3, r3, #6
 800239e:	2b04      	cmp	r3, #4
 80023a0:	bf14      	ite	ne
 80023a2:	2500      	movne	r5, #0
 80023a4:	6833      	ldreq	r3, [r6, #0]
 80023a6:	f04f 0600 	mov.w	r6, #0
 80023aa:	bf08      	it	eq
 80023ac:	68e5      	ldreq	r5, [r4, #12]
 80023ae:	f104 041a 	add.w	r4, r4, #26
 80023b2:	bf08      	it	eq
 80023b4:	1aed      	subeq	r5, r5, r3
 80023b6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80023ba:	bf08      	it	eq
 80023bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80023c0:	4293      	cmp	r3, r2
 80023c2:	bfc4      	itt	gt
 80023c4:	1a9b      	subgt	r3, r3, r2
 80023c6:	18ed      	addgt	r5, r5, r3
 80023c8:	42b5      	cmp	r5, r6
 80023ca:	d11a      	bne.n	8002402 <_printf_common+0xd2>
 80023cc:	2000      	movs	r0, #0
 80023ce:	e008      	b.n	80023e2 <_printf_common+0xb2>
 80023d0:	2301      	movs	r3, #1
 80023d2:	4652      	mov	r2, sl
 80023d4:	4649      	mov	r1, r9
 80023d6:	4638      	mov	r0, r7
 80023d8:	47c0      	blx	r8
 80023da:	3001      	adds	r0, #1
 80023dc:	d103      	bne.n	80023e6 <_printf_common+0xb6>
 80023de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80023e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80023e6:	3501      	adds	r5, #1
 80023e8:	e7c1      	b.n	800236e <_printf_common+0x3e>
 80023ea:	2030      	movs	r0, #48	; 0x30
 80023ec:	18e1      	adds	r1, r4, r3
 80023ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80023f2:	1c5a      	adds	r2, r3, #1
 80023f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80023f8:	4422      	add	r2, r4
 80023fa:	3302      	adds	r3, #2
 80023fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002400:	e7c2      	b.n	8002388 <_printf_common+0x58>
 8002402:	2301      	movs	r3, #1
 8002404:	4622      	mov	r2, r4
 8002406:	4649      	mov	r1, r9
 8002408:	4638      	mov	r0, r7
 800240a:	47c0      	blx	r8
 800240c:	3001      	adds	r0, #1
 800240e:	d0e6      	beq.n	80023de <_printf_common+0xae>
 8002410:	3601      	adds	r6, #1
 8002412:	e7d9      	b.n	80023c8 <_printf_common+0x98>

08002414 <_printf_i>:
 8002414:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002418:	7e0f      	ldrb	r7, [r1, #24]
 800241a:	4691      	mov	r9, r2
 800241c:	2f78      	cmp	r7, #120	; 0x78
 800241e:	4680      	mov	r8, r0
 8002420:	460c      	mov	r4, r1
 8002422:	469a      	mov	sl, r3
 8002424:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002426:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800242a:	d807      	bhi.n	800243c <_printf_i+0x28>
 800242c:	2f62      	cmp	r7, #98	; 0x62
 800242e:	d80a      	bhi.n	8002446 <_printf_i+0x32>
 8002430:	2f00      	cmp	r7, #0
 8002432:	f000 80d5 	beq.w	80025e0 <_printf_i+0x1cc>
 8002436:	2f58      	cmp	r7, #88	; 0x58
 8002438:	f000 80c1 	beq.w	80025be <_printf_i+0x1aa>
 800243c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002440:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002444:	e03a      	b.n	80024bc <_printf_i+0xa8>
 8002446:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800244a:	2b15      	cmp	r3, #21
 800244c:	d8f6      	bhi.n	800243c <_printf_i+0x28>
 800244e:	a101      	add	r1, pc, #4	; (adr r1, 8002454 <_printf_i+0x40>)
 8002450:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002454:	080024ad 	.word	0x080024ad
 8002458:	080024c1 	.word	0x080024c1
 800245c:	0800243d 	.word	0x0800243d
 8002460:	0800243d 	.word	0x0800243d
 8002464:	0800243d 	.word	0x0800243d
 8002468:	0800243d 	.word	0x0800243d
 800246c:	080024c1 	.word	0x080024c1
 8002470:	0800243d 	.word	0x0800243d
 8002474:	0800243d 	.word	0x0800243d
 8002478:	0800243d 	.word	0x0800243d
 800247c:	0800243d 	.word	0x0800243d
 8002480:	080025c7 	.word	0x080025c7
 8002484:	080024ed 	.word	0x080024ed
 8002488:	08002581 	.word	0x08002581
 800248c:	0800243d 	.word	0x0800243d
 8002490:	0800243d 	.word	0x0800243d
 8002494:	080025e9 	.word	0x080025e9
 8002498:	0800243d 	.word	0x0800243d
 800249c:	080024ed 	.word	0x080024ed
 80024a0:	0800243d 	.word	0x0800243d
 80024a4:	0800243d 	.word	0x0800243d
 80024a8:	08002589 	.word	0x08002589
 80024ac:	682b      	ldr	r3, [r5, #0]
 80024ae:	1d1a      	adds	r2, r3, #4
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	602a      	str	r2, [r5, #0]
 80024b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80024b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80024bc:	2301      	movs	r3, #1
 80024be:	e0a0      	b.n	8002602 <_printf_i+0x1ee>
 80024c0:	6820      	ldr	r0, [r4, #0]
 80024c2:	682b      	ldr	r3, [r5, #0]
 80024c4:	0607      	lsls	r7, r0, #24
 80024c6:	f103 0104 	add.w	r1, r3, #4
 80024ca:	6029      	str	r1, [r5, #0]
 80024cc:	d501      	bpl.n	80024d2 <_printf_i+0xbe>
 80024ce:	681e      	ldr	r6, [r3, #0]
 80024d0:	e003      	b.n	80024da <_printf_i+0xc6>
 80024d2:	0646      	lsls	r6, r0, #25
 80024d4:	d5fb      	bpl.n	80024ce <_printf_i+0xba>
 80024d6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80024da:	2e00      	cmp	r6, #0
 80024dc:	da03      	bge.n	80024e6 <_printf_i+0xd2>
 80024de:	232d      	movs	r3, #45	; 0x2d
 80024e0:	4276      	negs	r6, r6
 80024e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80024e6:	230a      	movs	r3, #10
 80024e8:	4859      	ldr	r0, [pc, #356]	; (8002650 <_printf_i+0x23c>)
 80024ea:	e012      	b.n	8002512 <_printf_i+0xfe>
 80024ec:	682b      	ldr	r3, [r5, #0]
 80024ee:	6820      	ldr	r0, [r4, #0]
 80024f0:	1d19      	adds	r1, r3, #4
 80024f2:	6029      	str	r1, [r5, #0]
 80024f4:	0605      	lsls	r5, r0, #24
 80024f6:	d501      	bpl.n	80024fc <_printf_i+0xe8>
 80024f8:	681e      	ldr	r6, [r3, #0]
 80024fa:	e002      	b.n	8002502 <_printf_i+0xee>
 80024fc:	0641      	lsls	r1, r0, #25
 80024fe:	d5fb      	bpl.n	80024f8 <_printf_i+0xe4>
 8002500:	881e      	ldrh	r6, [r3, #0]
 8002502:	2f6f      	cmp	r7, #111	; 0x6f
 8002504:	bf0c      	ite	eq
 8002506:	2308      	moveq	r3, #8
 8002508:	230a      	movne	r3, #10
 800250a:	4851      	ldr	r0, [pc, #324]	; (8002650 <_printf_i+0x23c>)
 800250c:	2100      	movs	r1, #0
 800250e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002512:	6865      	ldr	r5, [r4, #4]
 8002514:	2d00      	cmp	r5, #0
 8002516:	bfa8      	it	ge
 8002518:	6821      	ldrge	r1, [r4, #0]
 800251a:	60a5      	str	r5, [r4, #8]
 800251c:	bfa4      	itt	ge
 800251e:	f021 0104 	bicge.w	r1, r1, #4
 8002522:	6021      	strge	r1, [r4, #0]
 8002524:	b90e      	cbnz	r6, 800252a <_printf_i+0x116>
 8002526:	2d00      	cmp	r5, #0
 8002528:	d04b      	beq.n	80025c2 <_printf_i+0x1ae>
 800252a:	4615      	mov	r5, r2
 800252c:	fbb6 f1f3 	udiv	r1, r6, r3
 8002530:	fb03 6711 	mls	r7, r3, r1, r6
 8002534:	5dc7      	ldrb	r7, [r0, r7]
 8002536:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800253a:	4637      	mov	r7, r6
 800253c:	42bb      	cmp	r3, r7
 800253e:	460e      	mov	r6, r1
 8002540:	d9f4      	bls.n	800252c <_printf_i+0x118>
 8002542:	2b08      	cmp	r3, #8
 8002544:	d10b      	bne.n	800255e <_printf_i+0x14a>
 8002546:	6823      	ldr	r3, [r4, #0]
 8002548:	07de      	lsls	r6, r3, #31
 800254a:	d508      	bpl.n	800255e <_printf_i+0x14a>
 800254c:	6923      	ldr	r3, [r4, #16]
 800254e:	6861      	ldr	r1, [r4, #4]
 8002550:	4299      	cmp	r1, r3
 8002552:	bfde      	ittt	le
 8002554:	2330      	movle	r3, #48	; 0x30
 8002556:	f805 3c01 	strble.w	r3, [r5, #-1]
 800255a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800255e:	1b52      	subs	r2, r2, r5
 8002560:	6122      	str	r2, [r4, #16]
 8002562:	464b      	mov	r3, r9
 8002564:	4621      	mov	r1, r4
 8002566:	4640      	mov	r0, r8
 8002568:	f8cd a000 	str.w	sl, [sp]
 800256c:	aa03      	add	r2, sp, #12
 800256e:	f7ff fedf 	bl	8002330 <_printf_common>
 8002572:	3001      	adds	r0, #1
 8002574:	d14a      	bne.n	800260c <_printf_i+0x1f8>
 8002576:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800257a:	b004      	add	sp, #16
 800257c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002580:	6823      	ldr	r3, [r4, #0]
 8002582:	f043 0320 	orr.w	r3, r3, #32
 8002586:	6023      	str	r3, [r4, #0]
 8002588:	2778      	movs	r7, #120	; 0x78
 800258a:	4832      	ldr	r0, [pc, #200]	; (8002654 <_printf_i+0x240>)
 800258c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002590:	6823      	ldr	r3, [r4, #0]
 8002592:	6829      	ldr	r1, [r5, #0]
 8002594:	061f      	lsls	r7, r3, #24
 8002596:	f851 6b04 	ldr.w	r6, [r1], #4
 800259a:	d402      	bmi.n	80025a2 <_printf_i+0x18e>
 800259c:	065f      	lsls	r7, r3, #25
 800259e:	bf48      	it	mi
 80025a0:	b2b6      	uxthmi	r6, r6
 80025a2:	07df      	lsls	r7, r3, #31
 80025a4:	bf48      	it	mi
 80025a6:	f043 0320 	orrmi.w	r3, r3, #32
 80025aa:	6029      	str	r1, [r5, #0]
 80025ac:	bf48      	it	mi
 80025ae:	6023      	strmi	r3, [r4, #0]
 80025b0:	b91e      	cbnz	r6, 80025ba <_printf_i+0x1a6>
 80025b2:	6823      	ldr	r3, [r4, #0]
 80025b4:	f023 0320 	bic.w	r3, r3, #32
 80025b8:	6023      	str	r3, [r4, #0]
 80025ba:	2310      	movs	r3, #16
 80025bc:	e7a6      	b.n	800250c <_printf_i+0xf8>
 80025be:	4824      	ldr	r0, [pc, #144]	; (8002650 <_printf_i+0x23c>)
 80025c0:	e7e4      	b.n	800258c <_printf_i+0x178>
 80025c2:	4615      	mov	r5, r2
 80025c4:	e7bd      	b.n	8002542 <_printf_i+0x12e>
 80025c6:	682b      	ldr	r3, [r5, #0]
 80025c8:	6826      	ldr	r6, [r4, #0]
 80025ca:	1d18      	adds	r0, r3, #4
 80025cc:	6961      	ldr	r1, [r4, #20]
 80025ce:	6028      	str	r0, [r5, #0]
 80025d0:	0635      	lsls	r5, r6, #24
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	d501      	bpl.n	80025da <_printf_i+0x1c6>
 80025d6:	6019      	str	r1, [r3, #0]
 80025d8:	e002      	b.n	80025e0 <_printf_i+0x1cc>
 80025da:	0670      	lsls	r0, r6, #25
 80025dc:	d5fb      	bpl.n	80025d6 <_printf_i+0x1c2>
 80025de:	8019      	strh	r1, [r3, #0]
 80025e0:	2300      	movs	r3, #0
 80025e2:	4615      	mov	r5, r2
 80025e4:	6123      	str	r3, [r4, #16]
 80025e6:	e7bc      	b.n	8002562 <_printf_i+0x14e>
 80025e8:	682b      	ldr	r3, [r5, #0]
 80025ea:	2100      	movs	r1, #0
 80025ec:	1d1a      	adds	r2, r3, #4
 80025ee:	602a      	str	r2, [r5, #0]
 80025f0:	681d      	ldr	r5, [r3, #0]
 80025f2:	6862      	ldr	r2, [r4, #4]
 80025f4:	4628      	mov	r0, r5
 80025f6:	f000 f895 	bl	8002724 <memchr>
 80025fa:	b108      	cbz	r0, 8002600 <_printf_i+0x1ec>
 80025fc:	1b40      	subs	r0, r0, r5
 80025fe:	6060      	str	r0, [r4, #4]
 8002600:	6863      	ldr	r3, [r4, #4]
 8002602:	6123      	str	r3, [r4, #16]
 8002604:	2300      	movs	r3, #0
 8002606:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800260a:	e7aa      	b.n	8002562 <_printf_i+0x14e>
 800260c:	462a      	mov	r2, r5
 800260e:	4649      	mov	r1, r9
 8002610:	4640      	mov	r0, r8
 8002612:	6923      	ldr	r3, [r4, #16]
 8002614:	47d0      	blx	sl
 8002616:	3001      	adds	r0, #1
 8002618:	d0ad      	beq.n	8002576 <_printf_i+0x162>
 800261a:	6823      	ldr	r3, [r4, #0]
 800261c:	079b      	lsls	r3, r3, #30
 800261e:	d413      	bmi.n	8002648 <_printf_i+0x234>
 8002620:	68e0      	ldr	r0, [r4, #12]
 8002622:	9b03      	ldr	r3, [sp, #12]
 8002624:	4298      	cmp	r0, r3
 8002626:	bfb8      	it	lt
 8002628:	4618      	movlt	r0, r3
 800262a:	e7a6      	b.n	800257a <_printf_i+0x166>
 800262c:	2301      	movs	r3, #1
 800262e:	4632      	mov	r2, r6
 8002630:	4649      	mov	r1, r9
 8002632:	4640      	mov	r0, r8
 8002634:	47d0      	blx	sl
 8002636:	3001      	adds	r0, #1
 8002638:	d09d      	beq.n	8002576 <_printf_i+0x162>
 800263a:	3501      	adds	r5, #1
 800263c:	68e3      	ldr	r3, [r4, #12]
 800263e:	9903      	ldr	r1, [sp, #12]
 8002640:	1a5b      	subs	r3, r3, r1
 8002642:	42ab      	cmp	r3, r5
 8002644:	dcf2      	bgt.n	800262c <_printf_i+0x218>
 8002646:	e7eb      	b.n	8002620 <_printf_i+0x20c>
 8002648:	2500      	movs	r5, #0
 800264a:	f104 0619 	add.w	r6, r4, #25
 800264e:	e7f5      	b.n	800263c <_printf_i+0x228>
 8002650:	08002863 	.word	0x08002863
 8002654:	08002874 	.word	0x08002874

08002658 <__malloc_lock>:
 8002658:	4801      	ldr	r0, [pc, #4]	; (8002660 <__malloc_lock+0x8>)
 800265a:	f7ff bc6f 	b.w	8001f3c <__retarget_lock_acquire_recursive>
 800265e:	bf00      	nop
 8002660:	20000248 	.word	0x20000248

08002664 <__malloc_unlock>:
 8002664:	4801      	ldr	r0, [pc, #4]	; (800266c <__malloc_unlock+0x8>)
 8002666:	f7ff bc6a 	b.w	8001f3e <__retarget_lock_release_recursive>
 800266a:	bf00      	nop
 800266c:	20000248 	.word	0x20000248

08002670 <_realloc_r>:
 8002670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002674:	4680      	mov	r8, r0
 8002676:	4614      	mov	r4, r2
 8002678:	460e      	mov	r6, r1
 800267a:	b921      	cbnz	r1, 8002686 <_realloc_r+0x16>
 800267c:	4611      	mov	r1, r2
 800267e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002682:	f7ff bdd5 	b.w	8002230 <_malloc_r>
 8002686:	b92a      	cbnz	r2, 8002694 <_realloc_r+0x24>
 8002688:	f000 f868 	bl	800275c <_free_r>
 800268c:	4625      	mov	r5, r4
 800268e:	4628      	mov	r0, r5
 8002690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002694:	f000 f8aa 	bl	80027ec <_malloc_usable_size_r>
 8002698:	4284      	cmp	r4, r0
 800269a:	4607      	mov	r7, r0
 800269c:	d802      	bhi.n	80026a4 <_realloc_r+0x34>
 800269e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80026a2:	d812      	bhi.n	80026ca <_realloc_r+0x5a>
 80026a4:	4621      	mov	r1, r4
 80026a6:	4640      	mov	r0, r8
 80026a8:	f7ff fdc2 	bl	8002230 <_malloc_r>
 80026ac:	4605      	mov	r5, r0
 80026ae:	2800      	cmp	r0, #0
 80026b0:	d0ed      	beq.n	800268e <_realloc_r+0x1e>
 80026b2:	42bc      	cmp	r4, r7
 80026b4:	4622      	mov	r2, r4
 80026b6:	4631      	mov	r1, r6
 80026b8:	bf28      	it	cs
 80026ba:	463a      	movcs	r2, r7
 80026bc:	f000 f840 	bl	8002740 <memcpy>
 80026c0:	4631      	mov	r1, r6
 80026c2:	4640      	mov	r0, r8
 80026c4:	f000 f84a 	bl	800275c <_free_r>
 80026c8:	e7e1      	b.n	800268e <_realloc_r+0x1e>
 80026ca:	4635      	mov	r5, r6
 80026cc:	e7df      	b.n	800268e <_realloc_r+0x1e>

080026ce <memmove>:
 80026ce:	4288      	cmp	r0, r1
 80026d0:	b510      	push	{r4, lr}
 80026d2:	eb01 0402 	add.w	r4, r1, r2
 80026d6:	d902      	bls.n	80026de <memmove+0x10>
 80026d8:	4284      	cmp	r4, r0
 80026da:	4623      	mov	r3, r4
 80026dc:	d807      	bhi.n	80026ee <memmove+0x20>
 80026de:	1e43      	subs	r3, r0, #1
 80026e0:	42a1      	cmp	r1, r4
 80026e2:	d008      	beq.n	80026f6 <memmove+0x28>
 80026e4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80026e8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80026ec:	e7f8      	b.n	80026e0 <memmove+0x12>
 80026ee:	4601      	mov	r1, r0
 80026f0:	4402      	add	r2, r0
 80026f2:	428a      	cmp	r2, r1
 80026f4:	d100      	bne.n	80026f8 <memmove+0x2a>
 80026f6:	bd10      	pop	{r4, pc}
 80026f8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80026fc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002700:	e7f7      	b.n	80026f2 <memmove+0x24>
	...

08002704 <_sbrk_r>:
 8002704:	b538      	push	{r3, r4, r5, lr}
 8002706:	2300      	movs	r3, #0
 8002708:	4d05      	ldr	r5, [pc, #20]	; (8002720 <_sbrk_r+0x1c>)
 800270a:	4604      	mov	r4, r0
 800270c:	4608      	mov	r0, r1
 800270e:	602b      	str	r3, [r5, #0]
 8002710:	f7fd fe92 	bl	8000438 <_sbrk>
 8002714:	1c43      	adds	r3, r0, #1
 8002716:	d102      	bne.n	800271e <_sbrk_r+0x1a>
 8002718:	682b      	ldr	r3, [r5, #0]
 800271a:	b103      	cbz	r3, 800271e <_sbrk_r+0x1a>
 800271c:	6023      	str	r3, [r4, #0]
 800271e:	bd38      	pop	{r3, r4, r5, pc}
 8002720:	20000254 	.word	0x20000254

08002724 <memchr>:
 8002724:	4603      	mov	r3, r0
 8002726:	b510      	push	{r4, lr}
 8002728:	b2c9      	uxtb	r1, r1
 800272a:	4402      	add	r2, r0
 800272c:	4293      	cmp	r3, r2
 800272e:	4618      	mov	r0, r3
 8002730:	d101      	bne.n	8002736 <memchr+0x12>
 8002732:	2000      	movs	r0, #0
 8002734:	e003      	b.n	800273e <memchr+0x1a>
 8002736:	7804      	ldrb	r4, [r0, #0]
 8002738:	3301      	adds	r3, #1
 800273a:	428c      	cmp	r4, r1
 800273c:	d1f6      	bne.n	800272c <memchr+0x8>
 800273e:	bd10      	pop	{r4, pc}

08002740 <memcpy>:
 8002740:	440a      	add	r2, r1
 8002742:	4291      	cmp	r1, r2
 8002744:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8002748:	d100      	bne.n	800274c <memcpy+0xc>
 800274a:	4770      	bx	lr
 800274c:	b510      	push	{r4, lr}
 800274e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002752:	4291      	cmp	r1, r2
 8002754:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002758:	d1f9      	bne.n	800274e <memcpy+0xe>
 800275a:	bd10      	pop	{r4, pc}

0800275c <_free_r>:
 800275c:	b538      	push	{r3, r4, r5, lr}
 800275e:	4605      	mov	r5, r0
 8002760:	2900      	cmp	r1, #0
 8002762:	d040      	beq.n	80027e6 <_free_r+0x8a>
 8002764:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002768:	1f0c      	subs	r4, r1, #4
 800276a:	2b00      	cmp	r3, #0
 800276c:	bfb8      	it	lt
 800276e:	18e4      	addlt	r4, r4, r3
 8002770:	f7ff ff72 	bl	8002658 <__malloc_lock>
 8002774:	4a1c      	ldr	r2, [pc, #112]	; (80027e8 <_free_r+0x8c>)
 8002776:	6813      	ldr	r3, [r2, #0]
 8002778:	b933      	cbnz	r3, 8002788 <_free_r+0x2c>
 800277a:	6063      	str	r3, [r4, #4]
 800277c:	6014      	str	r4, [r2, #0]
 800277e:	4628      	mov	r0, r5
 8002780:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002784:	f7ff bf6e 	b.w	8002664 <__malloc_unlock>
 8002788:	42a3      	cmp	r3, r4
 800278a:	d908      	bls.n	800279e <_free_r+0x42>
 800278c:	6820      	ldr	r0, [r4, #0]
 800278e:	1821      	adds	r1, r4, r0
 8002790:	428b      	cmp	r3, r1
 8002792:	bf01      	itttt	eq
 8002794:	6819      	ldreq	r1, [r3, #0]
 8002796:	685b      	ldreq	r3, [r3, #4]
 8002798:	1809      	addeq	r1, r1, r0
 800279a:	6021      	streq	r1, [r4, #0]
 800279c:	e7ed      	b.n	800277a <_free_r+0x1e>
 800279e:	461a      	mov	r2, r3
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	b10b      	cbz	r3, 80027a8 <_free_r+0x4c>
 80027a4:	42a3      	cmp	r3, r4
 80027a6:	d9fa      	bls.n	800279e <_free_r+0x42>
 80027a8:	6811      	ldr	r1, [r2, #0]
 80027aa:	1850      	adds	r0, r2, r1
 80027ac:	42a0      	cmp	r0, r4
 80027ae:	d10b      	bne.n	80027c8 <_free_r+0x6c>
 80027b0:	6820      	ldr	r0, [r4, #0]
 80027b2:	4401      	add	r1, r0
 80027b4:	1850      	adds	r0, r2, r1
 80027b6:	4283      	cmp	r3, r0
 80027b8:	6011      	str	r1, [r2, #0]
 80027ba:	d1e0      	bne.n	800277e <_free_r+0x22>
 80027bc:	6818      	ldr	r0, [r3, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	4408      	add	r0, r1
 80027c2:	6010      	str	r0, [r2, #0]
 80027c4:	6053      	str	r3, [r2, #4]
 80027c6:	e7da      	b.n	800277e <_free_r+0x22>
 80027c8:	d902      	bls.n	80027d0 <_free_r+0x74>
 80027ca:	230c      	movs	r3, #12
 80027cc:	602b      	str	r3, [r5, #0]
 80027ce:	e7d6      	b.n	800277e <_free_r+0x22>
 80027d0:	6820      	ldr	r0, [r4, #0]
 80027d2:	1821      	adds	r1, r4, r0
 80027d4:	428b      	cmp	r3, r1
 80027d6:	bf01      	itttt	eq
 80027d8:	6819      	ldreq	r1, [r3, #0]
 80027da:	685b      	ldreq	r3, [r3, #4]
 80027dc:	1809      	addeq	r1, r1, r0
 80027de:	6021      	streq	r1, [r4, #0]
 80027e0:	6063      	str	r3, [r4, #4]
 80027e2:	6054      	str	r4, [r2, #4]
 80027e4:	e7cb      	b.n	800277e <_free_r+0x22>
 80027e6:	bd38      	pop	{r3, r4, r5, pc}
 80027e8:	2000024c 	.word	0x2000024c

080027ec <_malloc_usable_size_r>:
 80027ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80027f0:	1f18      	subs	r0, r3, #4
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	bfbc      	itt	lt
 80027f6:	580b      	ldrlt	r3, [r1, r0]
 80027f8:	18c0      	addlt	r0, r0, r3
 80027fa:	4770      	bx	lr

080027fc <_init>:
 80027fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027fe:	bf00      	nop
 8002800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002802:	bc08      	pop	{r3}
 8002804:	469e      	mov	lr, r3
 8002806:	4770      	bx	lr

08002808 <_fini>:
 8002808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800280a:	bf00      	nop
 800280c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800280e:	bc08      	pop	{r3}
 8002810:	469e      	mov	lr, r3
 8002812:	4770      	bx	lr
